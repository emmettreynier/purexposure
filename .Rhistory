"unit_of_meas", "acre_planted",
"unit_planted", "acre_treated",
"unit_treated", "applic_cnt", "applic_dt",
"applic_time", "county_cd", "base_ln_mer",
"township", "tship_dir", "range",
"range_dir", "section", "site_loc_id",
"grower_id", "license_no", "planting_seq",
"aer_gnd_ind", "site_code", "qualify_cd",
"batch_no", "document_no", "summary_cd",
"record_id")
if (!all(check)) {
stop(paste0("The raw_pur_df data frame should be an unaltered data frame ",
"returned from pull_raw_pur() with 33 columns."))
}
unique_years <- raw_pur_df %>%
dplyr::mutate(year = lubridate::year(lubridate::ymd(applic_dt))) %>%
dplyr::select(year) %>%
unique() %>%
tibble_to_vector()
unique_counties <- raw_pur_df %>%
dplyr::select(county_cd) %>%
unique() %>%
tibble_to_vector() %>%
find_counties(return = "codes")
if (is.character(years)) {
if (years == "all") {
years_check <- unique_years
}
} else {
years_check <- years
}
if (counties == "all") {
counties_check <- unique_counties
} else {
counties_check <- find_counties(counties)
}
years_check <- years_check %in% unique_years
if (!all(years_check)) {
stop(paste0("The years argument specifies years not present in the given ",
"raw_pur_df data frame."))
}
counties_check <- counties_check %in% unique_counties
if (!all(counties_check)) {
stop(paste0("The counties argument specifies counties not present in the ",
"given raw_pur_df data frame."))
}
raw_df <- raw_pur_df
}
counties
raw_df
df <- raw_df %>%
dplyr::mutate(township_pad = stringr::str_pad(raw_df$township, 2, "left", pad = "0"),
range = stringr::str_pad(raw_df$range, 2, "left", pad = "0"),
section = stringr::str_pad(raw_df$section, 2, "left", pad = "0"),
MTRS = as.character(paste0(base_ln_mer, township_pad, tship_dir,
range, range_dir, section)),
township = as.character(paste0(base_ln_mer, township_pad, tship_dir)),
MTR = as.character(paste0(township, range, range_dir))) %>%
dplyr::select(chem_code, lbs_chm_used, MTRS, MTR, county_cd, applic_dt,
aer_gnd_ind, use_no, acre_treated, unit_treated, prodno) %>%
dplyr::mutate(unit_treated = as.factor(unit_treated)) %>%
dplyr::filter(!MTRS %in% c(".0..0..0.", ".00.00.00", "NANANANANANA"),
unit_treated %in% c("A", "S")) %>%
dplyr::mutate(acre_treated = as.numeric(acre_treated),
lbs_chm_used = as.numeric(lbs_chm_used),
acre_treated = ifelse(unit_treated == "S",
acre_treated * 2.29568e-5,
acre_treated),
unit_treated = "A", # going to remove this later - all acres
lbs_per_acre = lbs_chm_used/acre_treated,
chem_code = as.integer(chem_code))
calc_max <- df %>%
dplyr::mutate(year = as.character(lubridate::year(lubridate::ymd(applic_dt)))) %>%
dplyr::group_by(chem_code, year) %>%
dplyr::summarize(mean = mean(lbs_per_acre, na.rm = TRUE),
sd = stats::sd(lbs_per_acre, na.rm = TRUE)) %>%
dplyr::mutate(calc_max = mean + 2*sd)
if (!"all" %in% chemicals) {
years_chemicals <- expand.grid(year = years, chemicals = chemicals) %>%
dplyr::group_by(year) %>%
tidyr::nest() %>%
dplyr::mutate(chemicals = purrr::map(data, tibble_to_vector))
chem_df <- purrr::map2_dfr(years_chemicals$year, years_chemicals$chemicals,
find_chemical_codes) %>% unique()
df <- df %>%
dplyr::filter(chem_code %in% chem_df$chem_code) %>%
dplyr::left_join(chem_df, by = "chem_code") %>%
dplyr::select(-chemical) %>%
dplyr::mutate(applic_dt = lubridate::ymd(applic_dt))
# chemicals
if (nrow(df) == 0) {
if (length(chemicals) == 1) {
chem_message <- paste0(chemicals)
} else if (length(chemicals) == 2) {
chem_message <- paste0(chemicals[1], " or ", chemicals[2])
} else if (length(chemicals) > 2 & length(chemicals) < 11) {
chems_vec <- chemicals[1:length(chemicals)-1]
chems_vec <- paste(chems_vec, collapse = ", ")
chem_message <- paste0(chems_vec, ", or ", chemicals[length(chemicals)])
} else if (length(chemicals) >= 11) {
chem_message <- "these chemicals"
}
# years
if (length(years) == 1) {
year_message <- years
} else if (length(years) == 2) {
year_message <- paste0(years[1], " or ", years[2])
} else if (length(years) > 1) {
years_list <- split(years, cumsum(c(1, diff(years) != 1)))
if (length(years_list) == 1) {
year_message <- paste0(years[1], " through ", years[length(years)])
} else {
years_vec <- years[1:length(years)-1]
years_vec <- paste(years_vec, collapse = ", ")
year_message <- paste0(years_vec, ", or ", years[length(years)])
}
}
# counties
names_clean <- find_counties(counties, return = "names")
if (length(names_clean) == 1) {
county_message <- paste0(names_clean, " county.")
} else if (length(names_clean) == 2) {
county_message <- paste0(names_clean[1], " or ", names_clean[2],
" county.")
} else if (length(names_clean) > 2) {
counties_vec <- names_clean[1:length(names_clean)-1]
counties_vec <- paste(counties_vec, collapse = ", ")
county_message <- paste0(counties_vec, ", or ",
names_clean[length(names_clean)], " county.")
}
stop(paste0("There weren't any pesticides containing ", chem_message,
" applied in ", year_message, " in ", county_message))
}
} else {
if (is.character(years)) {
if (years == "all") {
years <- 1990:2015
}
}
chem_df <- purexposure::chemical_list
out_chem_list <- list()
for (i in 1:length(years)) {
chem_year <- chem_df[[as.character(years[i])]]
chem_year <- chem_year %>% dplyr::mutate(year = as.character(years[i]))
out_chem_list[[i]] <- chem_year
}
out_chem_df <- dplyr::bind_rows(out_chem_list)
df <- df %>% dplyr::mutate(applic_dt = lubridate::ymd(applic_dt),
year = lubridate::year(applic_dt),
year = as.character(year)) %>%
dplyr::left_join(out_chem_df, by = c("chem_code", "year"))
}
df <- df %>% dplyr::mutate(year = as.character(lubridate::year(applic_dt)))
df2 <- calc_max %>%
dplyr::select(chem_code, year, calc_max) %>%
dplyr::right_join(df, by = c("chem_code", "year")) %>%
dplyr::mutate(outlier = ifelse((!is.na(calc_max) &
lbs_per_acre > calc_max), TRUE, FALSE),
lbs_chm_used = ifelse(lbs_per_acre > calc_max,
calc_max*acre_treated, lbs_chm_used)) %>%
plyr::rename(c("county_cd" = "pur_code")) %>%
dplyr::ungroup()
county <- purexposure::county_codes
out <- county %>%
dplyr::right_join(df2, by = "pur_code") %>%
dplyr::mutate(use_no = paste0(use_no, "_", lubridate::year(applic_dt)),
kg_chm_used = lbs_chm_used/2.20562) %>%
dplyr::select(chem_code, chemname, kg_chm_used, MTRS, MTR, county_name,
pur_code, applic_dt, aer_gnd_ind, use_no, outlier, prodno) %>%
plyr::rename(c("MTRS" = "section",
"MTR" = "township",
"applic_dt" = "date",
"aer_gnd_ind" = "aerial_ground")) %>%
dplyr::arrange(date, county_name)
missing_sections <- c(grep("\\?", out$section, value = TRUE),
grep("000000000", out$section, value = TRUE))
missing_townships <- c(grep("\\?", out$township, value = TRUE),
grep("0000000", out$township, value = TRUE))
if (length(missing_sections) != 0) {
out <- out %>% dplyr::mutate(section = ifelse(section %in% missing_sections,
NA, section),
section = ifelse(section == "000000000",
NA, section))
}
if (length(missing_townships) != 0) {
out <- out %>% dplyr::mutate(township = ifelse(township %in% missing_sections,
NA, township),
township = ifelse(township == "000000",
NA, township))
}
if (sum_application) {
section_townships <- out %>%
dplyr::select(section, township) %>%
unique()
if (sum == "all") {
if (unit == "section") {
if (aerial_ground) {
out <- help_sum_application(out, "all", "section", TRUE,
section_townships,
chem_code,
chemname, section, county_name, pur_code,
date, aerial_ground)
} else {
out <- help_sum_application(out, "all", "section", FALSE,
section_townships,
chem_code,
chemname, section, county_name, pur_code,
date)
}
} else if (unit == "township") {
if (aerial_ground) {
out <- help_sum_application(out, "all", "township", TRUE,
section_townships,
chem_code,
chemname, township, county_name, pur_code,
date, aerial_ground)
} else {
out <- help_sum_application(out, "all", "township", FALSE,
section_townships,
chem_code,
chemname, township, county_name, pur_code,
date)
}
}
} else if (sum == "chemical_class") {
## error handling for chemical_class df
if (!is.null(chemical_class) & !is.data.frame(chemical_class)) {
stop("The chemical_class argument should be a data frame.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
!all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class"))) {
stop(writeLines(paste0("The data frame entered in the chemical class ",
"argument should have only three columns named chem_code, ",
"chemname, and chemical_class.")))
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.integer(chemical_class$chem_code)) {
stop("The chem_code column should have integer values.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.character(chemical_class$chemname)) {
stop("The chemname column should have character values.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.character(chemical_class$chemical_class)) {
stop("The chemical_class column should have character values.")
}
if (unit == "section") {
if (aerial_ground) {
out <- help_sum_application(out, "chemical_class", "section", TRUE,
section_townships,
chemical_class = chemical_class,
chemical_class, section, county_name,
pur_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "chemical_class", "section", FALSE,
section_townships,
chemical_class = chemical_class,
chemical_class, section, county_name,
pur_code, date)
}
} else if (unit == "township") {
if (aerial_ground) {
out <- help_sum_application(out, "chemical_class", "township", TRUE,
section_townships,
chemical_class = chemical_class,
chemical_class, township, county_name,
pur_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "chemical_class", "township", FALSE,
section_townships,
chemical_class = chemical_class,
chemical_class, township, county_name,
pur_code, date)
}
}
}
} else {
if (!aerial_ground) {
out <- out %>% dplyr::select(-aerial_ground)
}
}
if ("prodno" %in% colnames(out)) {
out <- out %>% dplyr::mutate(prodno = as.integer(prodno))
}
out
out
county
library(purexposure)
df <- pull_clean_pur(years = 2000:2001,
counties = c("06001", "29", "riverside"),
chemicals = "methylene",
aerial_ground = TRUE)
setwd("~/Documents/purexposure")
df <- pull_clean_pur(years = 2001,
counties = "06001",
chemicals = "methylene",
aerial_ground = TRUE)
df <- pull_clean_pur(years = 2001,
counties = "06001",
aerial_ground = TRUE)
df
df
?coord_fixed
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
sun_empire <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500)
library(dplyr)
sun_empire <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500)
library(purexposure)
sun_empire <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500)
df_plot <- function(df) {
plot <- ggplot2::ggplot(data = df, ggplot2::aes(x = long, y = lat,
group = group)) +
ggplot2::geom_polygon(color = "black", fill = NA) +
ggplot2::theme_void() +
ggplot2::coord_fixed()
return(plot)
}
sun_empire_plot <- df_plot(sun_empire$buffer_plot_df)
sun_empire_plot
df_plot <- function(df) {
plot <- ggplot2::ggplot(data = df, ggplot2::aes(x = long, y = lat,
group = group)) +
ggplot2::geom_polygon(color = "black", fill = NA) +
ggplot2::theme_void() +
ggplot2::coord_map()
return(plot)
}
sun_empire_plot <- df_plot(sun_empire$buffer_plot_df)
sun_empire_plot
sun_empire_plot
sun_empire_plot
devtools::instal_github("leighseverson/purexposure")
devtools::install_github("leighseverson/purexposure")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
sun_empire2$exposure
two <- readRDS("vignettes/data/sun_empire2.rds")
load("vignettes/data/sun_empire2.RData")
head(sun_empire2)
sun_empire2 <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500,
time_period = "4 months")
library(dplyr)
sun_empire2 <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500,
time_period = "4 months")
library(purexposure)
sun_empire2 <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500,
time_period = "4 months")
load("data/sun_empire2.RData")
sun_empire2$exposure
sun_empire2$exposure
sun_empire2 <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500,
time_period = "4 months")
sun_empire2
sun_empire2$exposure
plot_sun_empire2 <- plot_exposure(sun_empire2, color_by = "percentile")
maps <- plot_sun_empire2$maps
multiplot(maps[[1]], maps[[2]], maps[[3]], cols = 2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(maps[[1]], maps[[2]], maps[[3]], cols = 2)
multiplot(maps[[1]], maps[[2]], maps[[3]], cols = 2)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
sun_empire
sun_empire <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500)
sun_empire_plot <- df_plot(sun_empire$buffer_plot_df)
sun_empire_plot
df_plot(sun_empire$buffer_plot_df)
load("data/fresno.RData")
fresno$map
fresno_clean <- pull_clean_pur(2004, "fresno")
fresno <- plot_county_application(fresno_clean)
fresno$map
knitr::include_graphics("figures/fresno_application.png")
fresno$map
years <- 2000
counties <- 'fresno'
chemicals = "all"
sum_application = FALSE
unit = "section"
sum = "all"
chemical_class = NULL
aerial_ground = TRUE
verbose = TRUE
quiet = FALSE
raw_pur_df = NULL
if (is.null(raw_pur_df)) {
raw_df <- pull_raw_pur(years = years, counties = counties, verbose = verbose,
quiet = quiet)
} else {
check <- colnames(raw_pur_df) == c("use_no", "prodno", "chem_code",
"prodchem_pct", "lbs_chm_used",
"lbs_prd_used", "amt_prd_used",
"unit_of_meas", "acre_planted",
"unit_planted", "acre_treated",
"unit_treated", "applic_cnt", "applic_dt",
"applic_time", "county_cd", "base_ln_mer",
"township", "tship_dir", "range",
"range_dir", "section", "site_loc_id",
"grower_id", "license_no", "planting_seq",
"aer_gnd_ind", "site_code", "qualify_cd",
"batch_no", "document_no", "summary_cd",
"record_id")
if (!all(check)) {
stop(paste0("The raw_pur_df data frame should be an unaltered data frame ",
"returned from pull_raw_pur() with 33 columns."))
}
unique_years <- raw_pur_df %>%
dplyr::mutate(year = lubridate::year(lubridate::ymd(applic_dt))) %>%
dplyr::select(year) %>%
unique() %>%
tibble_to_vector()
unique_counties <- raw_pur_df %>%
dplyr::select(county_cd) %>%
unique() %>%
tibble_to_vector() %>%
find_counties(return = "codes")
if (is.character(years)) {
if (years == "all") {
years_check <- unique_years
}
} else {
years_check <- years
}
if (counties == "all") {
counties_check <- unique_counties
} else {
counties_check <- find_counties(counties)
}
years_check <- years_check %in% unique_years
if (!all(years_check)) {
stop(paste0("The years argument specifies years not present in the given ",
"raw_pur_df data frame."))
}
counties_check <- counties_check %in% unique_counties
if (!all(counties_check)) {
stop(paste0("The counties argument specifies counties not present in the ",
"given raw_pur_df data frame."))
}
raw_df <- raw_pur_df
}
40/24
(40/24)*3
(40/24)*5
(40/24)*7
(40/24)*9
(40/24)*15
(40/24)*20
(40/24)*24
(40/24)*27
155-(3+1/3)
155-(8+1/3)
155-(11+2/3)
155-15
155-(33+1/3)
155-40
