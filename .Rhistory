class(df)
locations_dates_df
locations <- as.character(locations_dates_df$location)
for (i in 1:length(locations)) {
if (length(grep("-", locations[i])) == 1) {
latlon <- locations[i]
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- locations[i]
latlon_df <- help_geocode(address)
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(address_x, address_y))
}
latlon_ch <- paste0(latlon_out[1], ", ", latlon_out[2])
if (i == 1) {
latlon <- latlon_ch
} else {
latlon <- c(latlon, latlon_ch)
}
}
loc_df <- data.frame(location = unique(locations_dates_df$location),
latlon_loc = latlon)
latlon
class(df)
names(df)
df$continuous_summary
class(df$continuous_summary)
df$continuous_summary[1,]
df$continuous_summary[1,1]
#'                           sum = "chemical_class",
#'                           chemical_class = chemical_class_df) %>%
#'    plot_county_application()
#' op_yuba$map
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom rlang !!
#' @importFrom rlang :=
#' @export
plot_county_application <- function(clean_pur_df, county = NULL, pls = NULL,
color_by = "amount",
percentile = c(0.25, 0.5, 0.75),
start_date = NULL, end_date = NULL,
chemicals = "all", fill = "viridis",
crop = FALSE, alpha = 1,
ggmap_background = TRUE, ...) {
if (is.null(pls)) {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- "section"
} else {
section_township <- "township"
}
} else {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- tolower(pls)
} else {
section_township <- "township"
}
}
if (!"pur_code" %in% colnames(clean_pur_df)) {
stop(paste0("The clean_pur_df argument should be an unaltered data frame ",
"returned from the pull_clean_pur() function."))
}
# pull county shapefile
if (is.null(county)) {
code <- unique(clean_pur_df$pur_code)
if (length(code) > 1) {
counties <- paste(find_counties(code, "names"), collapse = ", ")
stop(paste0("Your clan_pur_df data frame has data for more than one ",
"county (", counties, "). You can specify which county to ",
"plot data for with the county argument."))
}
} else {
code <- find_counties(county)
}
if (length(code) != 1) {
stop(paste0("Since there is data for more than one county in your ",
"clean_pur_df data frame,\nspecify which county you would ",
"like to plot data for with the county argument."))
}
args <- list(...)
if (is.null(args$spdf)) {
county_shp <- pull_spdf(code, section_township = section_township)
} else {
county_shp <- args$spdf
}
county_bbox <- as.data.frame(county_shp@bbox)
county_df <- spdf_to_df(county_shp)
if (chemicals == "all") {
pur_df <- clean_pur_df
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
if (!chemicals %in% unique(clean_pur_df$chemical_class)) {
stop(paste0("The input clean_pur_df is summed by chemical_class,\nand the ",
"input chemicals argument does not match any unique values ",
"of chemical_class."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemical_class == chemicals)
} else {
if (!toupper(chemicals) %in% unique(clean_pur_df$chemname)) {
stop(paste0("The input chemicals argument does not match any unique ",
"values\nof active ingredients (the chemname column) in the ",
"input clean_pur_df data frame."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemname == toupper(chemicals))
}
if (!is.null(start_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (!is.null(end_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(pur_code == code) %>%
dplyr::group_by(section) %>%
dplyr::rename(pls = section) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(pur_code == code) %>%
dplyr::group_by(township) %>%
dplyr::rename(pls = township) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
if (color_by == "percentile") {
cutpoints_list <- help_categorize(section_data = pur_df2, buffer_or_county = "buffer",
percentile = percentile) # find cutpoints based on
# given data frame
pur_df3 <- cutpoints_list$df
labels <- cutpoints_list$categories
cutoff_values <- cutpoints_list$cutoff_values
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
if (section_township == "section") {
county_df <- county_df %>% dplyr::rename(pls = MTRS)
} else if (section_township == "township") {
county_df <- county_df %>% dplyr::rename(pls = MTR)
}
colnames(pur_df3)[1] <- "pls"
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
if (ggmap_background) {
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
}
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill %in% colormaps_vec) {
stop(paste0("The fill argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill, nshades = 1000, alpha = alpha)
# gradient <- c("#FFFFFF", gradient)
if (ggmap_background) {
plot <- ggmap::ggmap(location)
} else {
plot <- ggplot()
}
plot <- plot  +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
if (color_by == "amount") {
plot <- plot +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
} else if (color_by == "percentile") {
categories <- as.character(levels(pur_spatial$category))
if (!"None recorded" %in% categories) {
categories <- c(categories, "missing")
}
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
cols_out <- c(cols_out, "#FFFFFF")
names(cols_out) <- categories
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
}
plot <- plot +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
if (crop) {
long_range <- grDevices::extendrange(pur_spatial$long)
lat_range <- grDevices::extendrange(pur_spatial$lat)
plot <- plot + ggplot2::coord_map(xlim = long_range, ylim = lat_range)
}
if (color_by == "percentile") {
out <- list(map = plot, data = pur_df3, cutoff_values = cutoff_values)
} else {
out <- list(map = plot, data = pur_df3)
}
return(out)
}
plot_county_application(fresno)
fresno <- pull_clean_pur(2000:2004, "Fresno")
library(purexposure)
fresno <- pull_clean_pur(2000:2004, "Fresno")
plot <- ggplot2::ggplot()
devtools::document()
?geom_polygon
list.files()
devtools::document()
devtools::load_all()
code_df <- purexposure::county_codes
years <- 2016
counties <- "fresno"
verbose = T
quiet = F
if ("all" %in% tolower(years)) {
years <- 1990:2016
}
if (!all(is.numeric(years))) {
stop("Years should be four-digit numeric values.")
}
if (all(is.numeric(years)) & (min(years) < 1990 | max(years) > 2016)) {
stop("Years should be between 1990 and 2015.")
}
code_df <- purexposure::county_codes
## years section
if (length(years) == 1) {
year_message <- paste0(years, ".")
} else if (length(years) == 2) {
year_message <- paste0(years[1], " and ", years[2], ".")
} else if (length(years) > 1) {
years_list <- split(years, cumsum(c(1, diff(years) != 1)))
if (length(years_list) == 1) {
year_message <- paste0(years[1], " through ", years[length(years)], ".")
} else {
years_vec <- years[1:length(years)-1]
years_vec <- paste(years_vec, collapse = ", ")
year_message <- paste0(years_vec, ", and ", years[length(years)], ".")
}
}
if (!"all" %in% counties) {
## error handling
if (!all(is.character(counties))) {
stop("County names and/or codes should be character strings.")
}
names_clean <- find_counties(counties, return = "names")
## messaging
## counties section
if (length(names_clean) == 1) {
county_message <- paste0(names_clean, " county")
} else if (length(names_clean) == 2) {
county_message <- paste0(names_clean[1], " and ", names_clean[2],
" counties")
} else if (length(names_clean) > 2) {
counties_vec <- names_clean[1:length(names_clean)-1]
counties_vec <- paste(counties_vec, collapse = ", ")
county_message <- paste0(counties_vec, ", and ",
names_clean[length(names_clean)], " counties")
}
} else {
county_message <- "all counties"
}
if (verbose) {
message(paste0("Pulling PUR data for ", county_message, " for ",
year_message, " Great choice!"))
}
if (!"all" %in% counties) {
raw_df <- purrr::map_dfr(years, help_pull_pur, counties = counties,
quiet = quiet)
} else {
raw_df <- purrr::map_dfr(years, help_pull_pur, counties = "all",
quiet = quiet)
}
year
year <- 2016
counties <- "fresno"
quiet
getwd()
setwd("~/purexposure")
getwd()
url <- paste0("ftp://transfer.cdpr.ca.gov/pub/outgoing/pur_archives/pur",
year, ".zip")
file <- paste0("pur", year, ".zip")
if (!"all" %in% counties) {
codes <- find_counties(counties)
} else {
sm_year <- substr(year, 3, 4)
files <- grep(paste0("udc", sm_year, "_"), list.files(), value = TRUE)
codes <- substr(files, 7, 8)
}
if (!exists("purexposure_package_env")) {
dir <- tempdir()
setwd(dir)
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
purexposure_package_env <<- new.env()
purexposure_package_env$pur_lst <- list()
if (!"all" %in% counties) {
for (i in 1:length(codes)) {
purexposure_package_env$pur_lst[[paste0(year, "_", codes[i])]] <-
help_read_in_counties(codes[i], type = "codes", year = year)
}
} else {
for (i in 1:length(files)) {
purexposure_package_env$pur_lst[[paste0(year, "_", codes[i])]] <-
help_read_in_counties(files[i], type = "files", year = year)
}
}
} else {
to_be_downloaded <- c()
to_be_downloaded_files <- c()
if (!"all" %in% counties) {
for (i in 1:length(codes)) {
if (is.null(purexposure_package_env$pur_lst[[paste0(year, "_", codes[i])]])) {
to_be_downloaded <- c(to_be_downloaded, codes[i])
}
}
} else {
for (i in 1:length(codes)) {
if (is.null(purexposure_package_env$pur_lst[[paste0(year, "_", codes[i])]])) {
to_be_downloaded <- c(to_be_downloaded, codes[i])
to_be_downloaded_files <- c(to_be_downloaded_files, files[i])
}
}
}
if (!is.null(to_be_downloaded)) {
dir <- tempdir()
setwd(dir)
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
for (i in 1:length(to_be_downloaded)) {
if (!"all" %in% counties) {
purexposure_package_env$pur_lst[[paste0(year, "_", to_be_downloaded[i])]] <-
help_read_in_counties(to_be_downloaded[i], type = "codes", year = year)
} else {
purexposure_package_env$pur_lst[[paste0(year, "_", to_be_downloaded[i])]] <-
help_read_in_counties(to_be_downloaded_files[i], type = "files", year = year)
}
}
}
}
!exists("purexposure_package_env")
to_be_downloaded <- c()
to_be_downloaded_files <- c()
!"all" %in% counties
codes
i <- 1
is.null(purexposure_package_env$pur_lst[[paste0(year, "_", codes[i])]])
to_be_downloaded <- c(to_be_downloaded, codes[i])
to_be_downloaded
!is.null(to_be_downloaded)
dir <- tempdir()
setwd(dir)
url
file
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
file
getwd()
list.files()
dir
utils::unzip(file, exdir = dir)
dir
list.files()
!"all" %in% counties
to_be_downloaded[i]
code_or_file
code_or_file <- "code"
code_or_file <- "10"
type <- "codes"
year
sm_year <- substr(year, 3, 4)
raw_data <- suppressWarnings(suppressMessages(
readr::read_csv(paste0("udc", sm_year, "_", code_or_file, ".txt"),
progress = FALSE)))
list.files()
list.files("pur2016")
paste0("", "h")
list.files()
list.files("pur2016")
help_read_in_counties <- function(code_or_file, type, year) {
sm_year <- substr(year, 3, 4)
if (type == "codes") {
if (year > 2015) {
setwd(paste0("pur", year))
raw_data <- suppressWarnings(suppressMessages(
readr::read_csv(paste0("udc", sm_year, "_", code_or_file, ".txt"),
progress = FALSE)))
} else {
raw_data <- suppressWarnings(suppressMessages(
readr::read_csv(paste0("udc", sm_year, "_", code_or_file, ".txt"),
progress = FALSE)))
}
raw_data <- dplyr::mutate_all(raw_data, as.character)
} else if (type == "files") {
raw_data <- suppressWarnings(suppressMessages(
readr::read_csv(code_or_file, progress = FALSE)))
raw_data <- dplyr::mutate_all(raw_data, as.character)
}
# neither of these columns are documented in PUR guide, and they
# are inconsistently included in PUR datasets.
if ("error_flag" %in% colnames(raw_data)) {
raw_data <- raw_data %>%
dplyr::select(-error_flag)
}
if ("comtrs" %in% colnames(raw_data)) {
raw_data <- raw_data %>%
dplyr::select(-comtrs)
}
date_min <- lubridate::ymd(paste0(year, "-01-01"))
date_max <- lubridate::ymd(paste0(year, "-12-31"))
# sometimes 12/31 from the previous year is included...
raw_data <- raw_data %>%
dplyr::mutate(applic_dt = lubridate::mdy(applic_dt)) %>%
dplyr::filter(applic_dt >= date_min &
applic_dt <= date_max) %>%
dplyr::mutate(applic_dt = as.character(applic_dt)) %>%
dplyr::arrange(applic_dt)
return(raw_data)
}
!"all" %in% counties
purexposure_package_env$pur_lst[[paste0(year, "_", to_be_downloaded[i])]] <-
help_read_in_counties(to_be_downloaded[i], type = "codes", year = year)
codes
i <- 1
current_dir
getwd()
setwd('..')
getwd()
!"all" %in% counties
devtools::load_all()
setwd("~/purexposure")
devtools::load_all()
x <- pull_raw_pur(2016, "fresno")
x
library(readr)
library(usethis)
library(purrr)
library(dplyr)
pull_chemical_list <- function(year) {
url <- paste0("ftp://transfer.cdpr.ca.gov/pub/outgoing/pur_archives/pur",
year, ".zip")
file <- paste0("pur", year, ".zip")
current_dir <- getwd()
dir <- tempdir()
download.file(url, destfile = file, mode = "wb")
unzip(file, exdir = dir)
setwd(dir)
if (year > 2015) {
setwd(paste0("pur", year))
chemical_file <- readr::read_csv("chemical.txt") %>%
dplyr::select(-chemalpha_cd)
setwd("..")
} else {
chemical_file <- readr::read_csv("chemical.txt") %>%
dplyr::select(-chemalpha_cd)
}
setwd(current_dir)
return(chemical_file)
}
chemical_list <- purrr::map(1990:2016, pull_chemical_list)
class(chemical_list)
chemical_list[[1]]
names(chemical_list) <- 1990:2016
usethis::use_data(chemical_list, overwrite = TRUE)
devtools::load_all()
devtools::document()
find_chemical_codes(2016, "ammonia")
find_product_name(2016, "mosquito")
x <- pull_clean_pur(2016, "fresno")
x
x <- pull_raw_pur(2016, "fresno")
years <- 2016
counties <- "fresno"
chemicals = "all"
sum_application = FALSE
unit = "section"
sum = "all"
chemical_class = NULL
aerial_ground = TRUE
verbose = TRUE
quiet = FALSE
raw_df <- x
raw_df
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
chemical_class_df <- rbind(find_chemical_codes(2000, "methylene"),
find_chemical_codes(2000, "aldehyde")) %>%
rename(chemical_class = chemical)
chemical_class_df
chemical_class_df
