buffer_df <- exposure_list$buffer_plot_df
clean_pur <- exposure_list$clean_pur_df
pls_data <- exposure_list$meta_data %>%
dplyr::group_by(start_date, end_date, aerial_ground, chemicals) %>%
tidyr::nest()
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
gradient <- c("#FFFFFF", gradient)
location_longitude <- unique(exposure_list$exposure$longitude)
location_latitude <- unique(exposure_list$exposure$latitude)
buffer2 <- buffer_df %>%
dplyr::filter(id == "buffer1")
buffer_df <- buffer_df %>%
tidyr::gather(key = "section_or_township", value = "pls", MTR, MTRS)
buffer <- dplyr::select(buffer2, long, lat)
buffer <- buffer[grDevices::chull(buffer), ]
buffer <- methods::as(buffer, "gpc.poly")
pls_data <- exposure_list$exposure %>%
dplyr::select(start_date, end_date, chemicals, aerial_ground) %>%
dplyr::full_join(pls_data, by = c("start_date", "end_date", "aerial_ground",
"chemicals")) %>%
dplyr::ungroup() %>%
dplyr::rename(data_pls = data) %>%
dplyr::mutate(none_recorded = NA)
for (i in 1:nrow(pls_data)) {
data_pls_df <- pls_data$data_pls[[i]]
if (all(data_pls_df$none_recorded == TRUE)) {
pls_data$none_recorded[i] <- TRUE
} else {
pls_data$none_recorded[i] <- FALSE
}
}
pls_data <- pls_data %>% dplyr::select(1:4, 6, 5)
out_maps <- list()
for (i in 1:nrow(pls_data)) {
map <- help_map_exp(pls_data$start_date[i], pls_data$end_date[i],
pls_data$chemicals[i], pls_data$aerial_ground[i],
pls_data$none_recorded[i], pls_data$data_pls[[i]],
gradient, location_longitude, location_latitude,
buffer_df, buffer2, buffer, buffer_or_county, alpha,
clean_pur, pls_labels, pls_labels_size, percentile,
color_by)
out_maps[[i]] <- map
}
out_maps
plots <- list()
dfs <- list()
cutoff_values <- list()
exposures <- list()
for (i in 1:length(out_maps)) {
plots[[i]] <- out_maps[[i]]$plot
dfs[[i]] <- out_maps[[i]]$data
cutoff_values[[i]] <- out_maps[[i]]$cutoff_values
exposures[[i]] <- exposure_list$exposure[i,]
}
for (i in 1:length(exposures)) {
zero <- exposures[[i]]$exposure == 0
if (zero) {
exposures[[i]]$chemicals <- NA
}
}
if (color_by == "amount") {
out_maps_list <- list(maps = plots, pls_data = dfs,
exposure = exposures)
} else if (color_by == "percentile") {
out_maps_list <- list(maps = plots, pls_data = dfs,
exposure = exposures,
cutoff_values = cutoff_values)
}
out_maps_list
out_maps_list$maps
map
start_date
color_by
pls_df <- buffer_df %>%
dplyr::right_join(data_pls, by = "pls")
section_or_township <- unique(pls_df$section_or_township)
if (section_or_township == "MTRS") {
s_t <- "section"
} else if (section_or_township == "MTR") {
s_t <- "township"
}
legend_label <- paste0("Applied Pesticides\n(kg/", s_t, ")")
if (!none_recorded) {
full <- dplyr::filter(data_pls, percent > 0.999)
full_pls_df <- buffer_df %>%
dplyr::right_join(full, by = "pls") %>%
dplyr::select(long, lat, group, kg_intersection) %>%
dplyr::rename(kg = kg_intersection) %>%
unique()
partial <- dplyr::filter(data_pls, percent <= 0.999)
partial_pls_df <- buffer_df %>%
dplyr::right_join(partial, by = "pls")
pls_partials <- unique(partial_pls_df$pls)
if (length(pls_partials) != 0) {
for (i in 1:length(pls_partials)) {
df2 <- dplyr::filter(partial_pls_df, pls == pls_partials[i])
pls <- dplyr::select(df2, long, lat)
pls <- pls[grDevices::chull(pls), ]
pls <- methods::as(pls, "gpc.poly")
suppressWarnings(
intersection <- raster::intersect(pls, buffer)
)
# Warning message:
#   In `[<-`(`*tmp*`, i, value = gpc) :
#   implicit list embedding of S4 objects is deprecated
int_df <- as.data.frame(methods::as(intersection, "matrix")) %>%
dplyr::rename(long = x,
lat = y) %>%
dplyr::mutate(group = paste0("int", i),
kg = unique(df2$kg_intersection))
if (i == 1) {
out_int <- int_df
} else {
out_int <- rbind(out_int, int_df)
}
}
if (nrow(full_pls_df) != 0) {
section_data <- rbind(out_int, full_pls_df)
} else {
section_data <- out_int
}
} else if (nrow(full_pls_df) != 0) {
section_data <- full_pls_df
}
plot <- section_data %>%
ggplot2::ggplot() +
ggplot2::theme_void()
if (color_by == "amount") {
if (buffer_or_county == "buffer") {
plot <- plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
} else {
##
if (!is.na(aerial_ground)) {
clean_pur <- clean_pur %>%
dplyr::filter(aerial_ground == aerial_ground)
}
if (chemicals != "all") {
if ("chemical_class" %in% colnames(clean_pur)) {
clean_pur <- clean_pur %>%
dplyr::filter(chemical_class == chemicals)
}
}
if (s_t == "section") {
clean_pur2 <- clean_pur %>%
dplyr::filter(date >= lubridate::ymd(start_date) &
date <= lubridate::ymd(end_date)) %>%
dplyr::group_by(section) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE))
} else if (s_t == "township") {
clean_pur2 <- clean_pur %>%
dplyr::filter(date >= lubridate::ymd(start_date) &
date <= lubridate::ymd(end_date)) %>%
dplyr::group_by(township) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE))
}
clean_pur3 <- clean_pur2 %>%
dplyr::mutate(source = "county")
limits <- c(min(clean_pur3$kg, na.rm = TRUE),
max(clean_pur3$kg, na.rm = TRUE))
##
plot <- plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group,
fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
limits = limits, na.value = "#FFFFFF")
}
} else if (color_by == "percentile") {
cutpoint_list <- help_categorize(section_data,
buffer_or_county = buffer_or_county,
start_date, end_date, aerial_ground,
chemicals, clean_pur, s_t, percentile)
cutoff_values <- cutpoint_list$cutoff_values
section_data2 <- cutpoint_list$df
categories <- cutpoint_list$categories
if ("None recorded" %in% categories) {
n_cols <-  as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories)-1
} else {
n_cols <- as.integer(length(gradient)/length(categories))
end_i <- length(categories)
}
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
out <- col_vec
} else {
out <- c(out, col_vec)
}
}
if ("None recorded" %in% categories) {
out <- c(out, "#FFFFFF")
}
names(out) <- categories
plot <- plot +
ggplot2::geom_polygon(data = section_data2,
ggplot2::aes(x = long, y = lat, group = group,
fill = category), color = "black") +
ggplot2::scale_fill_manual(values = out, name = legend_label)
}
plot <- plot + ggplot2::geom_polygon(data = buffer_df,
ggplot2::aes(x = long, y = lat, group = group),
color ="black", fill = NA) +
ggplot2::geom_point(x = location_longitude, y = location_latitude, size = 2)
if (pls_labels) {
df_all <- dplyr::select(pls_df, pls, DDLONG, DDLAT) %>% unique()
plot <- plot +
ggplot2::geom_text(data = df_all, ggplot2::aes(x = DDLONG, y = DDLAT,
label = pls),
size = pls_labels_size, fontface = "bold")
}
data_pls <- data_pls %>%
dplyr::mutate(start_date = zoo::as.Date(start_date),
end_date = zoo::as.Date(end_date),
chemicals = chemicals, aerial_ground = aerial_ground) %>%
dplyr::select(pls, percent, kg, kg_intersection, start_date, end_date,
chemicals, aerial_ground, none_recorded, location, radius,
area)
} else {
missing_buffer_df <- buffer_df %>% dplyr::mutate(perc_fill = "None recorded",
scale_fill = "0")
if (color_by == "percentile") {
missing_plot <- ggplot2::ggplot(missing_buffer_df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group,
fill = perc_fill), color = "black") +
ggplot2::geom_point(x = location_longitude, y = location_latitude, color = "black",
size = 2) +
ggplot2::theme_void() +
ggplot2::scale_fill_manual(name = legend_label, values = c("None recorded" = NA))
} else if (color_by == "amount") {
missing_plot <- ggplot2::ggplot(missing_buffer_df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group,
fill = scale_fill), color = "black") +
ggplot2::geom_point(x = location_longitude, y = location_latitude, color = "black",
size = 2) +
ggplot2::theme_void() +
ggplot2::scale_fill_manual(name = legend_label, values = c("0" = NA))
}
plot <- missing_plot
start_date <- zoo::as.Date(start_date)
end_date <- zoo::as.Date(end_date)
data_pls <- data.frame(pls = "ALL", percent = NA,
kg = 0, kg_intersection = NA,
start_date = start_date,
end_date = end_date,
chemicals = NA,
aerial_ground = NA,
none_recorded = TRUE,
location = unique(data_pls$location),
radius = unique(data_pls$radius),
area = unique(data_pls$area))
cutoff_values <- data.frame(percentile = percentile, kg = NA)
}
if (color_by == "amount") {
return(list(plot = plot, data = data_pls))
} else if (color_by == "percentile") {
return(list(plot = plot, data = data_pls, cutoff_values = cutoff_values))
}
plot
missing_buffer_df
pls_df <- buffer_df %>%
dplyr::right_join(data_pls, by = "pls")
section_or_township <- unique(pls_df$section_or_township)
if (section_or_township == "MTRS") {
s_t <- "section"
} else if (section_or_township == "MTR") {
s_t <- "township"
}
legend_label <- paste0("Applied Pesticides\n(kg/", s_t, ")")
!none_recorded
full <- dplyr::filter(data_pls, percent > 0.999)
full_pls_df <- buffer_df %>%
dplyr::right_join(full, by = "pls") %>%
dplyr::select(long, lat, group, kg_intersection) %>%
dplyr::rename(kg = kg_intersection) %>%
unique()
full_pls_df
partial <- dplyr::filter(data_pls, percent <= 0.999)
partial_pls_df <- buffer_df %>%
dplyr::right_join(partial, by = "pls")
pls_partials <- unique(partial_pls_df$pls)
if (length(pls_partials) != 0) {
for (i in 1:length(pls_partials)) {
df2 <- dplyr::filter(partial_pls_df, pls == pls_partials[i])
pls <- dplyr::select(df2, long, lat)
pls <- pls[grDevices::chull(pls), ]
pls <- methods::as(pls, "gpc.poly")
suppressWarnings(
intersection <- raster::intersect(pls, buffer)
)
# Warning message:
#   In `[<-`(`*tmp*`, i, value = gpc) :
#   implicit list embedding of S4 objects is deprecated
int_df <- as.data.frame(methods::as(intersection, "matrix")) %>%
dplyr::rename(long = x,
lat = y) %>%
dplyr::mutate(group = paste0("int", i),
kg = unique(df2$kg_intersection))
if (i == 1) {
out_int <- int_df
} else {
out_int <- rbind(out_int, int_df)
}
}
if (nrow(full_pls_df) != 0) {
section_data <- rbind(out_int, full_pls_df)
} else {
section_data <- out_int
}
} else if (nrow(full_pls_df) != 0) {
section_data <- full_pls_df
}
plot <- section_data %>%
ggplot2::ggplot() +
ggplot2::theme_void()
plot
color_by == "amount"
buffer_or_county == "buffer"
plot <- plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
plot
section_data
full <- dplyr::filter(data_pls, percent > 0.999)
full
partial <- dplyr::filter(data_pls, percent <= 0.999)
partial
partial_pls_df <- buffer_df %>%
dplyr::right_join(partial, by = "pls")
partial_pls_df
pls_partials <- unique(partial_pls_df$pls)
pls_partials
i <- 6
df2 <- dplyr::filter(partial_pls_df, pls == pls_partials[i])
df2
pls <- dplyr::select(df2, long, lat)
pls <- pls[grDevices::chull(pls), ]
pls <- methods::as(pls, "gpc.poly")
pls
suppressWarnings(
intersection <- raster::intersect(pls, buffer)
)
intersection
plot(intersection)
int_df <- as.data.frame(methods::as(intersection, "matrix")) %>%
dplyr::rename(long = x,
lat = y) %>%
dplyr::mutate(group = paste0("int", i),
kg = unique(df2$kg_intersection))
int_df
for (i in 1:length(pls_partials)) {
df2 <- dplyr::filter(partial_pls_df, pls == pls_partials[i])
pls <- dplyr::select(df2, long, lat)
pls <- pls[grDevices::chull(pls), ]
pls <- methods::as(pls, "gpc.poly")
suppressWarnings(
intersection <- raster::intersect(pls, buffer)
)
# Warning message:
#   In `[<-`(`*tmp*`, i, value = gpc) :
#   implicit list embedding of S4 objects is deprecated
int_df <- as.data.frame(methods::as(intersection, "matrix")) %>%
dplyr::rename(long = x,
lat = y) %>%
dplyr::mutate(group = paste0("int", i),
kg = unique(df2$kg_intersection))
if (i == 1) {
out_int <- int_df
} else {
out_int <- rbind(out_int, int_df)
}
}
out_int
filter(out_int, kg == 102.9799)
filter(out_int, kg > 102 & kg < 103)
if (nrow(full_pls_df) != 0) {
section_data <- rbind(out_int, full_pls_df)
} else {
section_data <- out_int
}
section_data
filter(section_data, kg > 102 & kg < 103)
plot <- section_data %>%
ggplot2::ggplot() +
ggplot2::theme_void()
plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black")
plot <- plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
plot
plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black")
plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label)
plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black")
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label)
plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black")
plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label)
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label)
plot_exposure(sun_empire, fill_option = "warm", alpha = 0.5, pls_labels = TRUE)
plot_exposure(sun_empire, fill_option = "warm", alpha = 0.5, pls_labels = TRUE)$maps
plot_exposure(sun_empire, buffer_or_county = "buffer")$maps
devtools::load_all()
plot_exposure(sun_empire, buffer_or_county = "buffer")$maps
buffer_df <- exposure_list$buffer_plot_df
clean_pur <- exposure_list$clean_pur_df
pls_data <- exposure_list$meta_data %>%
dplyr::group_by(start_date, end_date, aerial_ground, chemicals) %>%
tidyr::nest()
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
location_longitude <- unique(exposure_list$exposure$longitude)
location_latitude <- unique(exposure_list$exposure$latitude)
buffer2 <- buffer_df %>%
dplyr::filter(id == "buffer1")
buffer_df <- buffer_df %>%
tidyr::gather(key = "section_or_township", value = "pls", MTR, MTRS)
buffer <- dplyr::select(buffer2, long, lat)
buffer <- buffer[grDevices::chull(buffer), ]
buffer <- methods::as(buffer, "gpc.poly")
pls_data <- exposure_list$exposure %>%
dplyr::select(start_date, end_date, chemicals, aerial_ground) %>%
dplyr::full_join(pls_data, by = c("start_date", "end_date", "aerial_ground",
"chemicals")) %>%
dplyr::ungroup() %>%
dplyr::rename(data_pls = data) %>%
dplyr::mutate(none_recorded = NA)
for (i in 1:nrow(pls_data)) {
data_pls_df <- pls_data$data_pls[[i]]
if (all(data_pls_df$none_recorded == TRUE)) {
pls_data$none_recorded[i] <- TRUE
} else {
pls_data$none_recorded[i] <- FALSE
}
}
pls_data <- pls_data %>% dplyr::select(1:4, 6, 5)
out_maps <- list()
for (i in 1:nrow(pls_data)) {
map <- help_map_exp(pls_data$start_date[i], pls_data$end_date[i],
pls_data$chemicals[i], pls_data$aerial_ground[i],
pls_data$none_recorded[i], pls_data$data_pls[[i]],
gradient, location_longitude, location_latitude,
buffer_df, buffer2, buffer, buffer_or_county, alpha,
clean_pur, pls_labels, pls_labels_size, percentile,
color_by)
out_maps[[i]] <- map
}
out_maps
plots <- list()
dfs <- list()
cutoff_values <- list()
exposures <- list()
for (i in 1:length(out_maps)) {
plots[[i]] <- out_maps[[i]]$plot
dfs[[i]] <- out_maps[[i]]$data
cutoff_values[[i]] <- out_maps[[i]]$cutoff_values
exposures[[i]] <- exposure_list$exposure[i,]
}
for (i in 1:length(exposures)) {
zero <- exposures[[i]]$exposure == 0
if (zero) {
exposures[[i]]$chemicals <- NA
}
}
if (color_by == "amount") {
out_maps_list <- list(maps = plots, pls_data = dfs,
exposure = exposures)
} else if (color_by == "percentile") {
out_maps_list <- list(maps = plots, pls_data = dfs,
exposure = exposures,
cutoff_values = cutoff_values)
}
out_maps_list
plot_exposure(sun_empire, color_by = "percentile")$maps
devtools::load_all()
plot_exposure(sun_empire, color_by = "percentile")$maps
plot_exposure(sun_empire, buffer_or_county = "buffer")$maps
