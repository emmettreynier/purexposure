time_df <- data.frame(start_date = date_seq,
end_date = end_dates)
time_df$end_date[nrow(time_df)] <- end_date
} else {
# one time period
if (is.null(start_date)) {
start_date <- min(clean_pur_df$date)
} else {
start_date <- lubridate::ymd(start_date)
}
if (is.null(end_date)) {
end_date <- max(clean_pur_df$date)
} else {
end_date <- lubridate::ymd(end_date)
}
time_df <- data.frame(start_date = start_date, end_date = end_date)
}
clean_pur_df <- clean_pur_df %>% dplyr::filter(date >= lubridate::ymd(min(time_df$start_date)) &
date <= lubridate::ymd(max(time_df$end_date)))
if ("section" %in% colnames(clean_pur_df)) {
out_list <- help_filter_pls(MTRS, "MTRS", which_pls, shp, buffer, df, clean_pur_df)
} else {
out_list <- help_filter_pls(MTR, "MTR", which_pls, shp, buffer, df, clean_pur_df)
}
pur_filt <- out_list$pur_filt
comb_df_filt <- out_list$comb_df_filt
pls_percents <- out_list$pls_intersections
pls_int <- out_list$pls_int
out <- purrr::map2(time_df$start_date,
time_df$end_date,
help_calculate_exposure, aerial_ground, chemicals,
clean_pur_df, location, pls_percents, pur_filt,
radius)
for (i in 1:length(out)) {
exp_row <- out[[i]]$row_out[[1]]
meta_data <- out[[i]]$meta_data[[1]]
if (i == 1) {
row_out <- exp_row
meta_out <- meta_data
} else {
row_out <- rbind(row_out, exp_row)
meta_out <- rbind(meta_out, meta_data)
}
}
row_out <- dplyr::mutate(row_out,
longitude = latlon_out[1],
latitude = latlon_out[2])
out <- list(exposure = row_out,
meta_data = meta_out,
buffer_plot_df = comb_df_filt,
county_plot = context_plot,
clean_pur_df = clean_pur_df)
out
test <- calculate_exposure(pur, location, radius, chemicals = "chemical_class")
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
length(grep("-", location)) == 1
length(grep("-", location)) == 1
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
latlon_out
location
location <- c(NA, NA)
location
NA %in% location
#'    calculate_exposure(location = "-121.9018, 38.7646",
#'    radius = 2500,
#'    aerial_ground = TRUE)
#' exp_list5$exposure
#' }
#' @importFrom magrittr %>%
#' @importFrom rlang :=
#' @importFrom rlang !!
#' @importFrom rlang !!!
#' @export
calculate_exposure <- function(clean_pur_df, location, radius,
time_period = NULL, start_date = NULL,
end_date = NULL, chemicals = "all",
aerial_ground = FALSE, verbose = TRUE) {
# get numeric coordinate vector from location
if (length(grep("-", location)) == 1) {
latlon <- location
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
}
if (NA %in% latlon_out) {
stop("error ... here")
}
# pull county shapefile
county <- find_location_county(location, return = "name", latlon_out)$county
check <- toupper(county) %in% clean_pur_df$county_name
if (!check) {
stop(paste0("\"", location,  "\"", " is located in ", county, " county. ",
"\nThe clean_pur_df data frame doesn't include data for this ",
"county."))
}
clean_pur_df <- clean_pur_df %>% dplyr::filter(county_name == toupper(county))
if (verbose) {
message(paste0("Calculating exposure for the location ", "\"", location,
"\"", "."))
}
radius <- as.numeric(radius)
# coordinates for buffer
buffer <- geosphere::destPoint(p = c(address_x, address_y), b = 0:360,
d = radius)
colnames(buffer)[1] <- "long"
buffer_df <- as.data.frame(buffer)
range <- buffer_df %>% dplyr::summarise(min_long = min(long),
min_lat = min(lat),
max_long = max(long),
max_lat = max(lat))
if ("section" %in% colnames(clean_pur_df)) {
shp <- pull_spdf(as.character(county), "section")
df <- spdf_to_df(shp)
} else {
shp <- pull_spdf(as.character(county), "township")
df <- spdf_to_df(shp)
}
context_plot <- ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "grey", fill = NA) +
ggplot2::geom_polygon(data = buffer_df, ggplot2::aes(x = long, y = lat),
color = "red", fill = NA) +
ggplot2::theme_void() +
ggplot2::coord_map()
# find sections (and townships) w/in buffer
which_pls <- df %>% dplyr::filter(long >= range$min_long &
long <= range$max_long &
lat >= range$min_lat &
lat <= range$max_lat)
if (nrow(which_pls) == 0) {
if ("section" %in% colnames(clean_pur_df)) {
borders <- df %>% group_by(MTRS) %>%
dplyr::summarise(min_long = min(long), min_lat = min(lat),
max_long = max(long), max_lat = max(lat))
corner <- purrr::map2_dfr(borders$max_long, borders$max_lat, help_calc_distance,
origin_long = range$max_long,
origin_lat = range$max_lat) %>%
dplyr::filter(long > range$max_long & lat > range$max_lat) %>%
dplyr::filter(dist == min(dist))
closest_pls <- borders %>% dplyr::filter(max_long == corner$long,
max_lat == corner$lat) %>%
dplyr::select(MTRS) %>%
tibble_to_vector()
which_pls <- df %>% dplyr::filter(MTRS == closest_pls)
} else {
borders <- df %>% group_by(MTR) %>%
dplyr::summarise(min_long = min(long), min_lat = min(lat),
max_long = max(long), max_lat = max(lat))
corner <- purrr::map2_dfr(borders$max_long, borders$max_lat, help_calc_distance,
origin_long = range$max_long,
origin_lat = range$max_lat) %>%
dplyr::filter(long > range$max_long & lat > range$max_lat) %>%
dplyr::filter(dist == min(dist))
closest_pls <- borders %>% dplyr::filter(max_long == corner$long,
max_lat == corner$lat) %>%
dplyr::select(MTR) %>%
tibble_to_vector()
which_pls <- df %>% dplyr::filter(MTR == closest_pls)
}
}
# data frame with start and end dates
if (!is.null(time_period)) {
# multiple time periods
if (is.null(start_date)) {
year <- lubridate::year(min(clean_pur_df$date))
start_date <- lubridate::ymd(paste0(year, "-01-01"))
} else {
start_date <- lubridate::ymd(start_date)
}
if (is.null(end_date)) {
year <- lubridate::year(max(clean_pur_df$date))
end_date <- lubridate::ymd(paste0(year, "12-31"))
} else {
end_date <- lubridate::ymd(end_date)
}
date_seq <- seq(start_date, end_date, by = time_period)
end_dates <- dplyr::lead(date_seq, 1) - lubridate::days(1)
time_df <- data.frame(start_date = date_seq,
end_date = end_dates)
time_df$end_date[nrow(time_df)] <- end_date
} else {
# one time period
if (is.null(start_date)) {
start_date <- min(clean_pur_df$date)
} else {
start_date <- lubridate::ymd(start_date)
}
if (is.null(end_date)) {
end_date <- max(clean_pur_df$date)
} else {
end_date <- lubridate::ymd(end_date)
}
time_df <- data.frame(start_date = start_date, end_date = end_date)
}
clean_pur_df <- clean_pur_df %>% dplyr::filter(date >= lubridate::ymd(min(time_df$start_date)) &
date <= lubridate::ymd(max(time_df$end_date)))
if ("section" %in% colnames(clean_pur_df)) {
out_list <- help_filter_pls(MTRS, "MTRS", which_pls, shp, buffer, df, clean_pur_df)
} else {
out_list <- help_filter_pls(MTR, "MTR", which_pls, shp, buffer, df, clean_pur_df)
}
pur_filt <- out_list$pur_filt
comb_df_filt <- out_list$comb_df_filt
pls_percents <- out_list$pls_intersections
pls_int <- out_list$pls_int
out <- purrr::map2(time_df$start_date,
time_df$end_date,
help_calculate_exposure, aerial_ground, chemicals,
clean_pur_df, location, pls_percents, pur_filt,
radius)
for (i in 1:length(out)) {
exp_row <- out[[i]]$row_out[[1]]
meta_data <- out[[i]]$meta_data[[1]]
if (i == 1) {
row_out <- exp_row
meta_out <- meta_data
} else {
row_out <- rbind(row_out, exp_row)
meta_out <- rbind(meta_out, meta_data)
}
}
row_out <- dplyr::mutate(row_out,
longitude = latlon_out[1],
latitude = latlon_out[2])
out <- list(exposure = row_out,
meta_data = meta_out,
buffer_plot_df = comb_df_filt,
county_plot = context_plot,
clean_pur_df = clean_pur_df)
return(out)
}
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
schools <- readRDS("~/Documents/pesticides_project/data/fresno_schools.rds")
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
chemical_class_df <- rbind(find_chemical_codes(2000, "methylene"),
find_chemical_codes(2000, "aldehyde")) %>%
dplyr::rename(chemical_class = chemical)
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
plot_exposure(exp_list4)
exposure_list <- exp_list4
color_by = "amount"
buffer_or_county = "county"
percentile = c(0.25, 0.5, 0.75)
fill_option = "viridis"
alpha = 0.7
pls_labels = FALSE
pls_labels_size = 4
buffer_df <- exposure_list$buffer_plot_df
clean_pur <- exposure_list$clean_pur_df
pls_data <- exposure_list$meta_data %>%
dplyr::group_by(start_date, end_date, aerial_ground, chemicals) %>%
tidyr::nest()
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
location_longitude <- unique(exposure_list$exposure$longitude)
location_latitude <- unique(exposure_list$exposure$latitude)
buffer2 <- buffer_df %>%
dplyr::filter(id == "buffer1")
buffer_df <- buffer_df %>%
tidyr::gather(key = "section_or_township", value = "pls", MTR, MTRS)
buffer <- dplyr::select(buffer2, long, lat)
buffer <- buffer[grDevices::chull(buffer), ]
buffer <- methods::as(buffer, "gpc.poly")
pls_data <- exposure_list$exposure %>%
dplyr::select(start_date, end_date, chemicals, aerial_ground) %>%
dplyr::full_join(pls_data, by = c("start_date", "end_date", "aerial_ground",
"chemicals")) %>%
dplyr::ungroup() %>%
dplyr::rename(data_pls = data) %>%
dplyr::mutate(none_recorded = NA)
for (i in 1:nrow(pls_data)) {
data_pls_df <- pls_data$data_pls[[i]]
if (all(data_pls_df$none_recorded == TRUE)) {
pls_data$none_recorded[i] <- TRUE
} else {
pls_data$none_recorded[i] <- FALSE
}
pls_data$data_pls[[i]] <- pls_data$data_pls[[i]] %>%
dplyr::mutate(kg = ifelse(kg == 0, NA, kg),
kg_intersection = ifelse(kg_intersection == 0, NA, kg))
}
pls_data <- pls_data %>% dplyr::select(1:4, 6, 5)
out_maps <- list()
i <- 1
start_date <- pls_data$start_date[i]
end_date <- pls_data$end_date[i]
chemicals <- pls_data$chemicals[i]
aerial_ground <- pls_data$aerial_ground[i]
none_recorded <- pls_data$none_recorded[i]
data_pls <- pls_data$data_pls[[i]]
chemicals
map <- help_map_exp(pls_data$start_date[i], pls_data$end_date[i],
pls_data$chemicals[i], pls_data$aerial_ground[i],
pls_data$none_recorded[i], pls_data$data_pls[[i]],
gradient, location_longitude, location_latitude,
buffer_df, buffer2, buffer, buffer_or_county, alpha,
clean_pur, pls_labels, pls_labels_size, percentile,
color_by)
map <- purexposure:::help_map_exp(pls_data$start_date[i], pls_data$end_date[i],
pls_data$chemicals[i], pls_data$aerial_ground[i],
pls_data$none_recorded[i], pls_data$data_pls[[i]],
gradient, location_longitude, location_latitude,
buffer_df, buffer2, buffer, buffer_or_county, alpha,
clean_pur, pls_labels, pls_labels_size, percentile,
color_by)
map
i <- 2
map <- purexposure:::help_map_exp(pls_data$start_date[i], pls_data$end_date[i],
pls_data$chemicals[i], pls_data$aerial_ground[i],
pls_data$none_recorded[i], pls_data$data_pls[[i]],
gradient, location_longitude, location_latitude,
buffer_df, buffer2, buffer, buffer_or_county, alpha,
clean_pur, pls_labels, pls_labels_size, percentile,
color_by)
map
library(purexposure)
chemical_class_df <- rbind(find_chemical_codes(2000, "methylene"),
find_chemical_codes(2000, "aldehyde")) %>%
dplyr::rename(chemical_class = chemical)
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
install_github("leighseverson/purexposure")
devtools::install_github("leighseverson/purexposure")
library(purexposure)
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
plot_exposure(exp_list4)
plot_exposure
help_map_exp
purexposure:::help_map_exp
library(purexposure)
chemical_class_df <- rbind(find_chemical_codes(2000, "methylene"),
find_chemical_codes(2000, "aldehyde")) %>%
dplyr::rename(chemical_class = chemical)
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
library(dplyr)
chemical_class_df <- rbind(find_chemical_codes(2000, "methylene"),
find_chemical_codes(2000, "aldehyde")) %>%
dplyr::rename(chemical_class = chemical)
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
plot_exposure(exp_list4)
exposure_list <- exp_list4
color_by = "amount"
buffer_or_county = "county"
percentile = c(0.25, 0.5, 0.75)
fill_option = "viridis"
alpha = 0.7
pls_labels = FALSE
pls_labels_size = 4
buffer_df <- exposure_list$buffer_plot_df
clean_pur <- exposure_list$clean_pur_df
pls_data <- exposure_list$meta_data %>%
dplyr::group_by(start_date, end_date, aerial_ground, chemicals) %>%
tidyr::nest()
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
location_longitude <- unique(exposure_list$exposure$longitude)
location_latitude <- unique(exposure_list$exposure$latitude)
buffer2 <- buffer_df %>%
dplyr::filter(id == "buffer1")
buffer_df <- buffer_df %>%
tidyr::gather(key = "section_or_township", value = "pls", MTR, MTRS)
buffer <- dplyr::select(buffer2, long, lat)
buffer <- buffer[grDevices::chull(buffer), ]
buffer <- methods::as(buffer, "gpc.poly")
pls_data <- exposure_list$exposure %>%
dplyr::select(start_date, end_date, chemicals, aerial_ground) %>%
dplyr::full_join(pls_data, by = c("start_date", "end_date", "aerial_ground",
"chemicals")) %>%
dplyr::ungroup() %>%
dplyr::rename(data_pls = data) %>%
dplyr::mutate(none_recorded = NA)
for (i in 1:nrow(pls_data)) {
data_pls_df <- pls_data$data_pls[[i]]
if (all(data_pls_df$none_recorded == TRUE)) {
pls_data$none_recorded[i] <- TRUE
} else {
pls_data$none_recorded[i] <- FALSE
}
pls_data$data_pls[[i]] <- pls_data$data_pls[[i]] %>%
dplyr::mutate(kg = ifelse(kg == 0, NA, kg),
kg_intersection = ifelse(kg_intersection == 0, NA, kg))
}
pls_data <- pls_data %>% dplyr::select(1:4, 6, 5)
out_maps <- list()
i <- 1
map <- help_map_exp(pls_data$start_date[i], pls_data$end_date[i],
pls_data$chemicals[i], pls_data$aerial_ground[i],
pls_data$none_recorded[i], pls_data$data_pls[[i]],
gradient, location_longitude, location_latitude,
buffer_df, buffer2, buffer, buffer_or_county, alpha,
clean_pur, pls_labels, pls_labels_size, percentile,
color_by)
map <- purexposure:::help_map_exp(pls_data$start_date[i], pls_data$end_date[i],
pls_data$chemicals[i], pls_data$aerial_ground[i],
pls_data$none_recorded[i], pls_data$data_pls[[i]],
gradient, location_longitude, location_latitude,
buffer_df, buffer2, buffer, buffer_or_county, alpha,
clean_pur, pls_labels, pls_labels_size, percentile,
color_by)
map
exp_list4$exposure
i <- 1
exposure_list$exposure[i,]
library(purexposure)
chemical_class_df <- rbind(find_chemical_codes(2000, "methylene"),
find_chemical_codes(2000, "aldehyde")) %>%
dplyr::rename(chemical_class = chemical)
exp_list4 <- pull_clean_pur(1995, "fresno",
chemicals = chemical_class_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
calculate_exposure(location = "13883 Lassen Ave, Helm, CA 93627",
radius = 1500,
chemicals = "chemical_class")
exp_list4$meta_data
plot_exposure(exp_list4)
schools <- readRDS("~/Documents/pesticides_project/data/fresno_schools.rds")
schools
schools <- schools[1:4,]
schools
schools <- schools[1:4,"full_address"]
schools
schools <- schools[1:4,"full_address"] %>% purexposure:::tibble_to_vector()
schools
gsub("-*", "", schools)
gsub("-.*", "", schools)
schools <- gsub("-.*", "", schools)
schools
?find_location_county
find_location_county(schools)
address <- "13883 Lassen Ave, Helm, CA 93627"
long_lat <- c("-120.09789, 36.53379")
find_location_county(c(address, long_lat))
?pull_clean_pur
