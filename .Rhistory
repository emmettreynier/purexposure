purexposure_package_env$pur_lst[[as.character(year)]] <-
readr::read_csv("product.txt") %>%
dplyr::select(prodno, prodstat_ind, product_name, signlwrd_ind) %>%
dplyr::mutate(prodno = as.integer(prodno),
prodstat_ind = as.character(prodstat_ind),
product_name = as.character(product_name),
signlwrd_ind = as.integer(signlwrd_ind),
year = as.integer(year))
))
}
product_file <- purexposure_package_env$pur_lst[[as.character(year)]]
setwd(current_dir)
return(product_file)
}
source('~/Documents/purexposure/R/02-find.R')
source('~/Documents/purexposure/R/01-helpers.R')
test <- pull_product_table(2000)
test <- pull_product_table(2000)
test
pull_product_table <- function(years, quiet = FALSE) {
current_dir <- getwd()
if (!exists("purexposure_package_env")) {
dir <- tempdir()
setwd(dir)
purexposure_package_env <<- new.env()
purexposure_package_env$pur_lst <- list()
for (i in 1:length(years)) {
url <- paste0("ftp://transfer.cdpr.ca.gov/pub/outgoing/pur_archives/pur",
years[i], ".zip")
file <- paste0("pur", years[i], ".zip")
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
suppressWarnings(suppressMessages(
purexposure_package_env$pur_lst[[as.character(years[i])]] <-
readr::read_csv("product.txt") %>%
dplyr::select(prodno, prodstat_ind, product_name, signlwrd_ind) %>%
dplyr::mutate(prodno = as.integer(prodno),
prodstat_ind = as.character(prodstat_ind),
product_name = as.character(product_name),
signlwrd_ind = as.integer(signlwrd_ind),
year = as.integer(years[i]))
))
}
} else {
to_be_downloaded <- c()
for (i in 1:length(years)) {
if (is.null(purexposure_package_env$pur_lst[[as.character(years[i])]])) {
to_be_downloaded <- c(to_be_downloaded, years[i])
}
}
if (!is.null(to_be_downloaded)) {
dir <- tempdir()
setwd(dir)
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
for (i in 1:length(to_be_downloaded)) {
url <- paste0("ftp://transfer.cdpr.ca.gov/pub/outgoing/pur_archives/pur",
to_be_downloaded[i], ".zip")
file <- paste0("pur", to_be_downloaded[i], ".zip")
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
suppressWarnings(suppressMessages(
purexposure_package_env$pur_lst[[as.character(to_be_downloaded[i])]] <-
readr::read_csv("product.txt") %>%
dplyr::select(prodno, prodstat_ind, product_name, signlwrd_ind) %>%
dplyr::mutate(prodno = as.integer(prodno),
prodstat_ind = as.character(prodstat_ind),
product_name = as.character(product_name),
signlwrd_ind = as.integer(signlwrd_ind),
year = as.integer(to_be_downloaded[i]))
))
}
}
}
for (i in 1:length(years)) {
product_file <- purexposure_package_env$pur_lst[[as.character(years[i])]]
if (i == 1) {
product_file_out <- product_file
} else {
product_file_out <- rbind(product_file_out, product_file)
}
}
setwd(current_dir)
return(product_file_out)
}
test <- pull_product_table(2000:2001)
years <- 2000:2001
setwd("~/Documents/purexposure")
current_dir <- getwd()
!exists("purexposure_package_env")
to_be_downloaded <- c()
for (i in 1:length(years)) {
if (is.null(purexposure_package_env$pur_lst[[as.character(years[i])]])) {
to_be_downloaded <- c(to_be_downloaded, years[i])
}
}
to_be_downloaded
!is.null(to_be_downloaded)
dir <- tempdir()
setwd(dir)
pull_product_table <- function(years, quiet = FALSE) {
current_dir <- getwd()
if (!exists("purexposure_package_env")) {
dir <- tempdir()
setwd(dir)
purexposure_package_env <<- new.env()
purexposure_package_env$pur_lst <- list()
for (i in 1:length(years)) {
url <- paste0("ftp://transfer.cdpr.ca.gov/pub/outgoing/pur_archives/pur",
years[i], ".zip")
file <- paste0("pur", years[i], ".zip")
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
suppressWarnings(suppressMessages(
purexposure_package_env$pur_lst[[as.character(years[i])]] <-
readr::read_csv("product.txt") %>%
dplyr::select(prodno, prodstat_ind, product_name, signlwrd_ind) %>%
dplyr::mutate(prodno = as.integer(prodno),
prodstat_ind = as.character(prodstat_ind),
product_name = as.character(product_name),
signlwrd_ind = as.integer(signlwrd_ind),
year = as.integer(years[i]))
))
}
} else {
to_be_downloaded <- c()
for (i in 1:length(years)) {
if (is.null(purexposure_package_env$pur_lst[[as.character(years[i])]])) {
to_be_downloaded <- c(to_be_downloaded, years[i])
}
}
if (!is.null(to_be_downloaded)) {
dir <- tempdir()
setwd(dir)
for (i in 1:length(to_be_downloaded)) {
url <- paste0("ftp://transfer.cdpr.ca.gov/pub/outgoing/pur_archives/pur",
to_be_downloaded[i], ".zip")
file <- paste0("pur", to_be_downloaded[i], ".zip")
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
suppressWarnings(suppressMessages(
purexposure_package_env$pur_lst[[as.character(to_be_downloaded[i])]] <-
readr::read_csv("product.txt") %>%
dplyr::select(prodno, prodstat_ind, product_name, signlwrd_ind) %>%
dplyr::mutate(prodno = as.integer(prodno),
prodstat_ind = as.character(prodstat_ind),
product_name = as.character(product_name),
signlwrd_ind = as.integer(signlwrd_ind),
year = as.integer(to_be_downloaded[i]))
))
}
}
}
for (i in 1:length(years)) {
product_file <- purexposure_package_env$pur_lst[[as.character(years[i])]]
if (i == 1) {
product_file_out <- product_file
} else {
product_file_out <- rbind(product_file_out, product_file)
}
}
setwd(current_dir)
return(product_file_out)
}
test <- pull_product_table(2000:2001)
test
tail(test)
tail(test)
test <- pull_product_table(2000:2001)
devtools::document()
setwd("~/Documents/purexposure")
test <- pull_product_table(2000:2001)
test <- pull_product_table(2000:2002)
test <- pull_product_table(2000:2002)
test
tail(test)
devtools::document()
?pull_product_table
?find_product_name
years <- 2000:2001
prod_df <- pull_product_table(years, quiet = quiet)
product <- "mosquito"
df <- prod_df
quotemeta <- function(string) {
stringr::str_replace_all(string, "(\\W)", "\\\\\\1")
}
prod_up <- toupper(product)
prod_up <- substr(prod_up, 1, 50)
prod_up
prod_up
df2 <- df[grep(quotemeta(prod_up), df$product_name), ]
df2
df2 <- df2 %>% dplyr::mutate(product = product)
tail(df2)
tail(df2$year)
find_product_name <- function(years, products = "all", quiet = FALSE) {
prod_df <- pull_product_table(years, quiet = quiet)
for (i in 1:length(products)) {
df <- help_find_product(products[i], prod_df)
if (i == 1) {
out <- df
} else {
out <- rbind(out, df)
}
}
out <- unique(out)
return(out)
}
test <- find_product_name(2000:2001, "mosquito")
test
years <- 2000:2001
df <- purexposure::chemical_list
head(df)
?rbind.fill
years
names(df)[lapply(df, names) %in% years]
l <- list(n1=numeric(0), n2="foo", n3=numeric(0), n4=1:5)
l[lapply(l, length) > 0]
names(l)[lapply(l, length) == 0]
lapply(l, length)
df
lapply(df, names())
lapply(df, names)
names(df) %in% years
df[names(df) %in% years]
df <- df[names(df) %in% years]
df
lapply(df, dplyr::mutate(year = names))
?map
df[[1]]
df <- purexposure::chemical_list
df <- df[names(df) %in% years]
for (i in 1:length(years)) {
df[[i]] <- df[[i]] %>% dplyr::mutate(year = years[i])
}
df <- do.call("rbind", df)
df
tail(df)
out <- purrr::map_dfr(chemicals, help_find_chemical, df)  %>%
unique()
chemicals <- "ammonia"
out <- purrr::map_dfr(chemicals, help_find_chemical, df)  %>%
unique()
out
address <- "13883 Lassen Ave, Helm, CA 93627"
find_location_county(location = address)
help_find_location_county <- function(location, return = "name",
latlon_out = NULL) {
if (is.null(latlon_out)) {
if (length(grep("-", location)) == 1) {
latlon <- location
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
}
} else {
latlon_out <- latlon_out
}
counties <- maps::map("county", fill = TRUE, col = "transparent", plot = FALSE)
ids <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- maptools::map2SpatialPolygons(counties, IDs = ids,
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
points_sp <- sp::SpatialPoints(data.frame(x = latlon_out[1],
y = latlon_out[2]),
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
index <- sp::over(points_sp, counties_sp)
county_names <- sapply(counties_sp@polygons, function(x) x@ID)
county_name <- county_names[index]
county_name <- strsplit(county_name, ",")[[1]][2]
find_counties_safe <- purrr::safely(find_counties)
return <- paste0(return, "s")
name_clean <- find_counties_safe(county_name, return = return)
if (!is.null(name_clean$error)) {
stop(paste0("Couldn't find ", "\"", location,  "\"", " in California."))
}
return(name_clean$result)
}
help_find_location_county <- function(location, return = "name",
latlon_out = NULL) {
if (is.null(latlon_out)) {
if (length(grep("-", location)) == 1) {
latlon <- location
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
}
} else {
latlon_out <- latlon_out
}
counties <- maps::map("county", fill = TRUE, col = "transparent", plot = FALSE)
ids <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- maptools::map2SpatialPolygons(counties, IDs = ids,
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
points_sp <- sp::SpatialPoints(data.frame(x = latlon_out[1],
y = latlon_out[2]),
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
index <- sp::over(points_sp, counties_sp)
county_names <- sapply(counties_sp@polygons, function(x) x@ID)
county_name <- county_names[index]
county_name <- strsplit(county_name, ",")[[1]][2]
find_counties_safe <- purrr::safely(find_counties)
return <- paste0(return, "s")
name_clean <- find_counties_safe(county_name, return = return)
if (!is.null(name_clean$error)) {
name_clean$result <- paste0("Couldn't find ", "\"", location,  "\"",
" in California."))
}
return(name_clean$result)
}
help_find_location_county <- function(location, return = "name",
latlon_out = NULL) {
if (is.null(latlon_out)) {
if (length(grep("-", location)) == 1) {
latlon <- location
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
}
} else {
latlon_out <- latlon_out
}
counties <- maps::map("county", fill = TRUE, col = "transparent", plot = FALSE)
ids <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- maptools::map2SpatialPolygons(counties, IDs = ids,
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
points_sp <- sp::SpatialPoints(data.frame(x = latlon_out[1],
y = latlon_out[2]),
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
index <- sp::over(points_sp, counties_sp)
county_names <- sapply(counties_sp@polygons, function(x) x@ID)
county_name <- county_names[index]
county_name <- strsplit(county_name, ",")[[1]][2]
find_counties_safe <- purrr::safely(find_counties)
return <- paste0(return, "s")
name_clean <- find_counties_safe(county_name, return = return)
if (!is.null(name_clean$error)) {
name_clean$result <- paste0("Couldn't find ", "\"", location,  "\"",
" in California.")
}
return(name_clean$result)
}
help_find_location_county(address)
help_find_location_county("8085 S. Franklin Ct., Centennial, CO")
help_find_location_county("8085 S. Franklin Ct., Centennial, CO")
location <- '8085 S. Franklin Ct. Centennial, CO 80122'
help_find_location_county(location)
help_find_location_county <- function(location, return = "name",
latlon_out = NULL) {
if (is.null(latlon_out)) {
if (length(grep("-", location)) == 1) {
latlon <- location
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
}
} else {
latlon_out <- latlon_out
}
counties <- maps::map("county", fill = TRUE, col = "transparent", plot = FALSE)
ids <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- maptools::map2SpatialPolygons(counties, IDs = ids,
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
points_sp <- sp::SpatialPoints(data.frame(x = latlon_out[1],
y = latlon_out[2]),
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
index <- sp::over(points_sp, counties_sp)
county_names <- sapply(counties_sp@polygons, function(x) x@ID)
county_name <- county_names[index]
county_name <- strsplit(county_name, ",")[[1]][2]
find_counties_safe <- purrr::safely(find_counties)
return <- paste0(return, "s")
name_clean <- find_counties_safe(county_name, return = return)
if (!is.null(name_clean$error)) {
name_clean$result <- paste0("Couldn't find ", "\"", location,  "\"",
" in California.")
}
return(name_clean$result)
}
help_find_location_county <- function(location, return = "name",
latlon_out = NULL) {
if (is.null(latlon_out)) {
if (length(grep("-", location)) == 1) {
latlon <- location
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
}
} else {
latlon_out <- latlon_out
}
counties <- maps::map("county", fill = TRUE, col = "transparent", plot = FALSE)
ids <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- maptools::map2SpatialPolygons(counties, IDs = ids,
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
points_sp <- sp::SpatialPoints(data.frame(x = latlon_out[1],
y = latlon_out[2]),
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
index <- sp::over(points_sp, counties_sp)
county_names <- sapply(counties_sp@polygons, function(x) x@ID)
county_name <- county_names[index]
county_name <- strsplit(county_name, ",")[[1]][2]
find_counties_safe <- purrr::safely(find_counties)
return <- paste0(return, "s")
name_clean <- find_counties_safe(county_name, return = return)
if (!is.null(name_clean$error)) {
name_clean$result <- paste0("Error: Couldn't find ", "\"", location,  "\"",
" in California.")
}
out_df <- data.frame(location = location, county = name_clean$result)
}
help_find_location_county(location)
help_find_location_county(location)
help_find_location_county <- function(location, return = "name",
latlon_out = NULL) {
if (is.null(latlon_out)) {
if (length(grep("-", location)) == 1) {
latlon <- location
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
}
} else {
latlon_out <- latlon_out
}
counties <- maps::map("county", fill = TRUE, col = "transparent", plot = FALSE)
ids <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- maptools::map2SpatialPolygons(counties, IDs = ids,
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
points_sp <- sp::SpatialPoints(data.frame(x = latlon_out[1],
y = latlon_out[2]),
proj4string = sp::CRS("+proj=longlat +datum=WGS84"))
index <- sp::over(points_sp, counties_sp)
county_names <- sapply(counties_sp@polygons, function(x) x@ID)
county_name <- county_names[index]
county_name <- strsplit(county_name, ",")[[1]][2]
find_counties_safe <- purrr::safely(find_counties)
return <- paste0(return, "s")
name_clean <- find_counties_safe(county_name, return = return)
if (!is.null(name_clean$error)) {
name_clean$result <- paste0("Error: Couldn't find ", "\"", location,  "\"",
" in California.")
}
out_df <- data.frame(location = location, county = name_clean$result)
return(out_df)
}
help_find_location_county(location)
help_find_location_county(location)
find_location_county <- function(locations, return = "name",
latlon_out = NULL) {
out <- map_dfr(locations, help_find_location_county, return = return,
latlon_out = latlon_out)
return(out)
}
test <- find_location_county(c(location, address))
find_location_county <- function(locations, return = "name",
latlon_out = NULL) {
out <- purrr::map_dfr(locations, help_find_location_county, return = return,
latlon_out = latlon_out)
return(out)
}
test <- find_location_county(c(location, address))
test
test
devtools::document()
