filter(fresno_classes, chemical_class == "aldehyde"))
rbind(filter(fresno_classes, chemical_class == "other" & section == "M12S13E27" &
date == lubridate::ymd("2008-01-01")),
filter(fresno_classes, chemical_class == "methylene"),
filter(fresno_classes, chemical_class == "aldehyde" & sectino == "M13S21E36" &
date == lubridate::ymd("2008-01-12")))
rbind(filter(fresno_classes, chemical_class == "other" & section == "M12S13E27" &
date == lubridate::ymd("2008-01-01")),
filter(fresno_classes, chemical_class == "methylene"),
filter(fresno_classes, chemical_class == "aldehyde" & section == "M13S21E36" &
date == lubridate::ymd("2008-01-12")))
filter(fresno_classes, (chemical_class == "other" & section == "M12S13E27" &
date == lubridate::ymd("2008-01-01")) |
(chemical_class == "methylene") |
(chemical_class == "aldehyde" & section == "M13S21E36" & date == lubridate::ymd("2008-01-12")))
fresno_classes2 <- filter(fresno_classes, (chemical_class == "other" & section == "M12S13E27" &
date == lubridate::ymd("2008-01-01")) |
(chemical_class == "methylene") |
(chemical_class == "aldehyde" & section == "M13S21E36" & date == lubridate::ymd("2008-01-12")))
fresno_classes <- filter(fresno_classes, (chemical_class == "other" & section == "M12S13E27" &
date == lubridate::ymd("2008-01-01")) |
(chemical_class == "methylene") |
(chemical_class == "aldehyde" & section == "M13S21E36" & date == lubridate::ymd("2008-01-12")))
save(fresno_classes, file = "data/fresno_classes.RData")
unique_classes <- filter(fresno_classes, (chemical_class == "other" & section == "M12S13E27" &
date == lubridate::ymd("2008-01-01")) |
(chemical_class == "methylene") |
(chemical_class == "aldehyde" & section == "M13S21E36" & date == lubridate::ymd("2008-01-12")))
save(unique_classes, file = "data/unique_classes.RData")
fresno_classes <- pull_clean_pur(2008, "fresno", sum_application = TRUE,
unit = "section", sum = "chemical_class",
chemical_class = chemical_class_df,
aerial_ground = FALSE)
fresno_classes <- fresno_classes[1:3, ]
save(fresno_classes, file = "data/fresno_classes.RData")
fresno_classes <- pull_clean_pur(2008, "fresno", sum_application = TRUE,
unit = "section", sum = "chemical_class",
chemical_class = chemical_class_df,
aerial_ground = FALSE)
rbind(fresno_classes[1:3, ],
filter(fresno_classes, (chemical_class == "methylene") |
(chemical_class == "aldehyde" &
section == "M13S21E36" &
date == lubridate::ymd("2008-01-12")))
rbind(fresno_classes[1:3, ],
filter(fresno_classes, (chemical_class == "methylene") |
(chemical_class == "aldehyde" &
section == "M13S21E36" &
date == lubridate::ymd("2008-01-12"))))
fresno_classes <- rbind(fresno_classes[1:3, ],
filter(fresno_classes, (chemical_class == "methylene") |
(chemical_class == "aldehyde" &
section == "M13S21E36" &
date == lubridate::ymd("2008-01-12"))))
save(fresno_classes, file = "data/fresno_classes.RData")
sun_empire <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500)
names(sun_empire)
sun_empire$clean_pur_df <- sun_empire$clean_pur_df[1:2,]
sun_empire$county_plot <- "a"
names(sun_empire)
save(sun_empire, file = "data/sun_empire.RData")
sun_empire_plot <- df_plot(sun_empire$buffer_plot_df)
sun_empire2 <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500,
time_period = "4 months")
names(sun_empire2)
sun_empire$county_plot <- "null"
save(sun_empire, file = "data/sun_empire.RData")
sun_empire2$meta_data <- "null"
sun_empire2$buffer_plot_df <- "null"
sun_empire2$county_plot <- "null"
sun_empire2$clean_pur_df <- "null"
save(sun_empire2, file = "data/sun_empire2.RData")
names(sun_empire2)
load("data/sun_empire.RData")
sun_empire2$exposure
sun_empire
sun_empire <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500)
plot_sun_empire <- plot_exposure(sun_empire)
save(plot_sun_empire, file = "data/plot_sun_empire.RData")
names(plot_sun_empire)
plot_se_percentile <- plot_exposure(sun_empire, color_by = "percentile")
names(plot_se_percentile)
plot_se_percentile$maps <- "null"
plot_se_percentile$pls_data <- "null"
plot_se_percentile$exposure <- "null"
save(plot_se_percentile, file = "data/plot_se_percentile.RData")
plot_se_percentile$cutoff_values
sun_empire2$exposure
fresno <- plot_county_application(fresno_clean)
fresno_clean <- pull_clean_pur(2004, "fresno")
fresno <- plot_county_application(fresno_clean)
names(fresno)
fresno$data <- fresno$data[1:2, ]
fresno$map <- "null"
save(fresno, file = "data/fresno.RData")
library(purexposure)
devtools::build_win()
library(purexposure)
library(purexposure)
devtools::install_github("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
packageVersion("rmarkdown")
library(purexposure)
install.packages("Rcpp")
devtools::check_win_release()
devtools::install_github("hadley/devtools")
packageVersion("devtools")
library(devtools)
packageVersion("devtools")
devtools::check_win_release()
devtools::check_win()
devtools::build_win()
library(remotes)
source("https:://install-github.me/hadley/devtools")
library(callr)
devtools::use_travis()
usethis::use_travis()
install.packages(c("colormap", "rgdal"))
packageVersion("rgdal")
packageVersion("colormap")
install.packages("spelling")
library(spelling)
spelling::spell_check_package()
library(purexposure)
?install_version
devtools::install_version("devtools", version = "1.12.0", repos = "http://cran.us.r-project.org")
devtools::install_version("devtools", version = "1.6", repos = "http://cran.us.r-project.org")
devtools::install_version("devtools", version = "1.2", repos = "http://cran.us.r-project.org")
source("https://install-github.me/mangothecat/callr")
?install_github
devtools::install_github("hadley/devtools")
packageVersion("devtools")
packageVersion("callr")
library(purexposure)
devtools::build_win
devtools::build_win()
devtools::build_win()
usethis::use_travis()
tulare_list <- pull_clean_pur(2010, "tulare") %>%
calculate_exposure(location = "-119.3473, 36.2077", radius = 3500) %>%
plot_exposure()
library(dplyr)
tulare_list <- pull_clean_pur(2010, "tulare") %>%
calculate_exposure(location = "-119.3473, 36.2077", radius = 3500) %>%
plot_exposure()
library(purexposure)
tulare_list <- pull_clean_pur(2010, "tulare") %>%
calculate_exposure(location = "-119.3473, 36.2077", radius = 3500) %>%
plot_exposure()
tulare_list
library(purexposure)
devtools::build_win()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
find_location_county("12906 South Fowler Ave., Selma, CA 93662")
location <- "12906 South Fowler Ave., Selma, CA 93662"
return = "name"
latlon_out = NULL
if (is.null(latlon_out)) {
if (length(grep("-", location)) == 1) {
latlon <- location
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- location
suppressMessages(latlon_df <- ggmap::geocode(address, messaging = FALSE))
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(latlon_df$lon, latlon_df$lat))
}
} else {
latlon_out <- latlon_out
}
latlon_out
ggmap::geocodeQueryCheck()
test <- function(x) {
x+2
}
test(2)
test(2) <- 5
packageVersion("ggmap")
"fresno"
library(purexposure)
devtools::build_win()
library(purexposure)
devtools::build_win()
packageVersion("rgdal")
packageVersion('colormap')
df <- data.frame(a = 1:3)
library(dplyr)
df <- df %>% dplyr::rename(b = a)
install.packages("dplyr")
install.packages("dplyr")
packageVersion("dplyr")
library(dplyr)
df <- df %>% dplyr::rename(b = a)
?rename
df <- df %>% plyr::rename(c("a" = "b"))
df
library(devtools)
install_version("dplyr", version = "0.7.3", repos = "http://cran.us.r-project.org")
packageVersion("dplyr")
df <- data.frame(a = 1)
df %>% dplyr::rename(a = b)
library(magrittr)
df %>% dplyr::rename(b = a)
install_version("dplyr", version = "0.7.2", repos = "http://cran.us.r-project.org")
packageVersion("dplyr")
df %>% dplyr::rename(b = a)
list.files("~/Desktop")
efficacy_summary <- paste0("~/Desktop/Gates_18 Efficacy R spreadsheet.csv")
efficacy_summary <- paste0("https://raw.githubusercontent.com/KatieKey/",
"input_output_shiny_group/master/CSV_Files/",
"efficacy_summary.csv")
efficacy_summary <- read_csv(efficacy_summary)
library(readr)
efficacy_summary <- read_csv(efficacy_summary)
library(dplyr)
in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
efficacy_summary <- paste0("https://raw.githubusercontent.com/KatieKey/",
"input_output_shiny_group/master/CSV_Files/",
"efficacy_summary.csv")
efficacy_summary <- read_csv(efficacy_summary)
in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
plyr::rename(c("drug" = "Drugs")) %>%
#  rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
library(tidyr)
in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
plyr::rename(c("drug" = "Drugs")) %>%
#  rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
in_vivo
in_vivo_SM <- in_vivo %>%
gather(key = variable, value = value, -Drugs, -dosage_interval) %>%
mutate(variable = factor(variable, levels = c("RIM", "OCS","ICS","ULU","SLU","SLE","PLA"),
labels = c("Rim (of lesion)","Outer Caseum","Inner Caseum","Uninvolved Lung",
"Standard Lung", "Standard Lesion", "Plasma"))) %>%
mutate(dosage_interval = factor(dosage_interval, levels = c("50BID","100QD")))
invivo_variable_filtered <- in_vivo_SM %>%
dplyr::filter(variable %in% variables)
in_vivo_SM
unique(in_vivo_SM$variable)
for (i in 1:length(unique(in_vivo_SM$variable))) { unique(in_vivo_SM$variable)[i] }
for (i in 1:length(unique(in_vivo_SM$variable))) { unique(in_vivo_SM$variable)[i] }
for (i in 1:length(unique(in_vivo_SM$variable))) { print(unique(in_vivo_SM$variable)[i]) }
for (i in 1:length(unique(in_vivo_SM$Drugs))) { print(unique(in_vivo_SM$Drugs)[i]) }
invivo_function <- function(efficacy_summary,
variables = c("Plasma", "Uninvolved Lung",
"Rim (of lesion)", "Outer Caseum",
"Inner Caseum", "Standard Lung",
"Standard Lesion"),
drugs = c("DRUG1", "DRUG2", "DRUG3", "DRUG4",
"DRUG5", "DRUG6", "DRUG7", "DRUG9", "DRUG10",
"DRUG11")) {
# efficacy_summary <- read_csv(paste0("https://raw.githubusercontent.com/KatieKey/input_output_shiny_group/",
#                                     "master/CSV_Files/efficacy_summary.csv"))
efficacy_summary <- read_csv(efficacy_summary)
in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
plyr::rename(c("drug" = "Drugs")) %>%
#  rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
in_vivo_SM <- in_vivo %>%
gather(key = variable, value = value, -Drugs, -dosage_interval) %>%
mutate(variable = factor(variable, levels = c("RIM", "OCS","ICS","ULU","SLU","SLE","PLA"),
labels = c("Rim (of lesion)","Outer Caseum","Inner Caseum","Uninvolved Lung",
"Standard Lung", "Standard Lesion", "Plasma"))) %>%
mutate(dosage_interval = factor(dosage_interval, levels = c("50BID","100QD")))
invivo_variable_filtered <- in_vivo_SM %>%
dplyr::filter(variable %in% variables)
invivo_drug_filtered <- in_vivo_SM %>%
dplyr::filter(Drugs %in% drugs)
in_vivo_SMplot <- in_vivo_SM %>%
ggplot(aes(x = dosage_interval, y = value, color = Drugs))+
geom_beeswarm(alpha = 0.5, size = 1.5)+
scale_y_log10()+
labs(x = 'Dosage-Interval', y = 'Value')+
ggtitle('In-Vivo Distribution of TB Drugs')+
theme_few()+
facet_wrap(~ variable, ncol = 4)
return(in_vivo_SMplot)
}
efficacy_summary <- paste0("https://raw.githubusercontent.com/KatieKey/",
"input_output_shiny_group/master/CSV_Files/",
"efficacy_summary.csv")
invivo_function(efficacy_summary)
library(ggplot2)
invivo_function(efficacy_summary)
library(ggbeswarm)
install.packages("ggbeeswarm")
library(ggbeeswarm)
invivo_function(efficacy_summary)
library(ggthemes)
invivo_function(efficacy_summary)
invivo_function(efficacy_summary, variables = c("Rim (of lesion)"), drugs = ("DRUG1"))
variables = c("Rim (of lesion)")
drugs = ("DRUG1")
efficacy_summary <- read_csv(efficacy_summary)
in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
plyr::rename(c("drug" = "Drugs")) %>%
#  rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
in_vivo_SM <- in_vivo %>%
gather(key = variable, value = value, -Drugs, -dosage_interval) %>%
mutate(variable = factor(variable, levels = c("RIM", "OCS","ICS","ULU","SLU","SLE","PLA"),
labels = c("Rim (of lesion)","Outer Caseum","Inner Caseum","Uninvolved Lung",
"Standard Lung", "Standard Lesion", "Plasma"))) %>%
mutate(dosage_interval = factor(dosage_interval, levels = c("50BID","100QD")))
variables
in_vivo_SM
invivo_variable_filtered <- in_vivo_SM %>%
dplyr::filter(variable %in% variables)
invivo_variable_filtered
efficacy_summary <- paste0("https://raw.githubusercontent.com/KatieKey/",
"input_output_shiny_group/master/CSV_Files/",
"efficacy_summary.csv")
invivo_function <- function(efficacy_summary,
variables = c("Plasma", "Uninvolved Lung",
"Rim (of lesion)", "Outer Caseum",
"Inner Caseum", "Standard Lung",
"Standard Lesion"),
drugs = c("DRUG1", "DRUG2", "DRUG3", "DRUG4",
"DRUG5", "DRUG6", "DRUG7", "DRUG9", "DRUG10",
"DRUG11")) {
# efficacy_summary <- read_csv(paste0("https://raw.githubusercontent.com/KatieKey/input_output_shiny_group/",
#                                     "master/CSV_Files/efficacy_summary.csv"))
efficacy_summary <- read_csv(efficacy_summary)
in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
plyr::rename(c("drug" = "Drugs")) %>%
#  rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
in_vivo_SM <- in_vivo %>%
gather(key = variable, value = value, -Drugs, -dosage_interval) %>%
mutate(variable = factor(variable, levels = c("RIM", "OCS","ICS","ULU","SLU","SLE","PLA"),
labels = c("Rim (of lesion)","Outer Caseum","Inner Caseum","Uninvolved Lung",
"Standard Lung", "Standard Lesion", "Plasma"))) %>%
mutate(dosage_interval = factor(dosage_interval, levels = c("50BID","100QD")))
in_vivo_SM_filtered <- in_vivo_SM %>%
dplyr::filter(variable %in% variables) %>%
dplyr::filter(Drugs %in% drugs)
# invivo_drug_filtered <- in_vivo_SM %>%
#   dplyr::filter(Drugs %in% drugs)
in_vivo_SMplot <- in_vivo_SM_filtered %>%
ggplot(aes(x = dosage_interval, y = value, color = Drugs))+
geom_beeswarm(alpha = 0.5, size = 1.5)+
scale_y_log10()+
labs(x = 'Dosage-Interval', y = 'Value')+
ggtitle('In-Vivo Distribution of TB Drugs')+
theme_few()+
facet_wrap(~ variable, ncol = 4)
return(in_vivo_SMplot)
}
invivo_function(efficacy_summary, variables = c("Rim (of lesion)"), drugs = ("DRUG1"))
invivo_function(efficacy_summary)
variables <- NULL
!is.null(variables)
invivo_function <- function(efficacy_summary,
variables = NULL,
drugs = NULL) {
#
# variables = c("Plasma", "Uninvolved Lung",
#               "Rim (of lesion)", "Outer Caseum",
#               "Inner Caseum", "Standard Lung",
#               "Standard Lesion"),
# drugs = c("DRUG1", "DRUG2", "DRUG3", "DRUG4",
#           "DRUG5", "DRUG6", "DRUG7", "DRUG9", "DRUG10",
#           "DRUG11")) {
# efficacy_summary <- read_csv(paste0("https://raw.githubusercontent.com/KatieKey/input_output_shiny_group/",
#                                     "master/CSV_Files/efficacy_summary.csv"))
efficacy_summary <- read_csv(efficacy_summary)
in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
plyr::rename(c("drug" = "Drugs")) %>%
#  rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
in_vivo_SM <- in_vivo %>%
gather(key = variable, value = value, -Drugs, -dosage_interval) %>%
mutate(variable = factor(variable, levels = c("RIM", "OCS","ICS","ULU","SLU","SLE","PLA"),
labels = c("Rim (of lesion)","Outer Caseum","Inner Caseum","Uninvolved Lung",
"Standard Lung", "Standard Lesion", "Plasma"))) %>%
mutate(dosage_interval = factor(dosage_interval, levels = c("50BID","100QD")))
if (!is.null(variables)) {
in_vivo_SM <- in_vivo_SM %>%
dplyr::filter(variable %in% variables)
}
if (!is.null(drugs)) {
in_vivo_SM <- in_vivo_SM %>%
dplyr::filter(Drugs %in% drugs)
}
# in_vivo_SM_filtered <- in_vivo_SM %>%
#   dplyr::filter(variable %in% variables) %>%
#   dplyr::filter(Drugs %in% drugs)
# invivo_drug_filtered <- in_vivo_SM %>%
#   dplyr::filter(Drugs %in% drugs)
in_vivo_SMplot <- in_vivo_SM %>%
ggplot(aes(x = dosage_interval, y = value, color = Drugs))+
geom_beeswarm(alpha = 0.5, size = 1.5)+
scale_y_log10()+
labs(x = 'Dosage-Interval', y = 'Value')+
ggtitle('In-Vivo Distribution of TB Drugs')+
theme_few()+
facet_wrap(~ variable, ncol = 4)
return(in_vivo_SMplot)
}
invivo_function(efficacy_summary)
invivo_function(efficacy_summary, variables = c("Rim (of lesion)"), drugs = ("DRUG1"))
efficacy_summary <- paste0("https://raw.githubusercontent.com/KatieKey/",
"input_output_shiny_group/master/CSV_Files/",
"efficacy_summary.csv")
efficacy_summary <- read_csv(efficacy_summary)
efficacy_summary
efficacy_summary <- paste0("https://raw.githubusercontent.com/KatieKey/",
"input_output_shiny_group/master/CSV_Files/",
"efficacy_summary.csv")
efficacy_summary
library(ggpolypath)
install.packages("ggpolypath")
library(ggpolypath)
maphome
maphome <- merge(maphome, dathome[, c("object_", "name")])
maphome
str(maphome)
ggplot(maphome) +
aes(x = x_, y = y_, group = branch_, fill = name) +
geom_polypath()
gs <- ggplot(gardenstate)
gs <- gs + aes(x = x, y = y, group = group, fill = id)
gs +  geom_polypath() + geom_path() + coord_equal()
gs + geom_polygon()
gs +  geom_polypath() + geom_path() + coord_equal()
efficacy_summary <- paste0("https://raw.githubusercontent.com/KatieKey/",
"input_output_shiny_group/master/CSV_Files/",
"efficacy_summary.csv")
efficacy_summary <- readr::read_csv(efficacy_summary)
in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
plyr::rename(c("drug" = "Drugs")) %>%
#  rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
in_vivo_SM <- in_vivo %>%
gather(key = variable, value = value, -Drugs, -dosage_interval) %>%
mutate(variable = factor(variable, levels = c("RIM", "OCS","ICS","ULU","SLU","SLE","PLA"),
labels = c("Rim (of lesion)","Outer Caseum","Inner Caseum","Uninvolved Lung",
"Standard Lung", "Standard Lesion", "Plasma"))) %>%
mutate(dosage_interval = factor(dosage_interval, levels = c("50BID","100QD")))
colnames(in_vivo_SM)
install.packages("dplyr")
library(dplyr)
df <- data.frame(x = 1)
df %>% dplyr::rename(a = x)
FreeBeer <- "TRUE"
Working <- (FreeBeer != TRUE)
paste0("Working = ", Working)
source()
library()
search()
packageVersion("dplyr")
df <- data.frame(z = 1:3)
df
df %>% dplyr::rename(a = z)
library(magg)
library(magrittr)
df %>% dplyr::rename(a = z)
df %>% dplyr::rename("a" = z)
df %>% plyr::rename(c("z" = "a"))
library(magrittr)
df <- data.frame(z = 1:3)
df %>% dplyr::rename(a = z)
df %>% plyr::rename(c("z" = "a"))
sessionInfo()
df %>% dplyr::rename("a" = "a")
df %>% dplyr::rename("a" = "z")
f
df
df %>% dplyr::rename("z" = "a")
c("z" = "a")
"z" = "a"
a
z
usethis::use_package("plyr")
packageVersion("plyr")
packageVersion("rlang")
rename_expr <- rlang::enquo(section)
?enquo
?devtools::check()
?devtools::check_win()
?devtools::check_win_devel()
library(purexposure)
devtools::check()
devtools::check_cran()
rcmdcheck::revdep_check()
devtools::build_win()
