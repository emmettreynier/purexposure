in_vivo <- efficacy_summary %>%
select(drug, dosage, dose_int, PLA, ULU, RIM, OCS, ICS, SLU, SLE) %>%
plyr::rename(c("drug" = "Drugs")) %>%
#  rename(Drugs = "drug") %>%
unite(dosage_interval, dosage:dose_int, sep = "")
in_vivo_SM <- in_vivo %>%
gather(key = variable, value = value, -Drugs, -dosage_interval) %>%
mutate(variable = factor(variable, levels = c("RIM", "OCS","ICS","ULU","SLU","SLE","PLA"),
labels = c("Rim (of lesion)","Outer Caseum","Inner Caseum","Uninvolved Lung",
"Standard Lung", "Standard Lesion", "Plasma"))) %>%
mutate(dosage_interval = factor(dosage_interval, levels = c("50BID","100QD")))
colnames(in_vivo_SM)
install.packages("dplyr")
library(dplyr)
df <- data.frame(x = 1)
df %>% dplyr::rename(a = x)
FreeBeer <- "TRUE"
Working <- (FreeBeer != TRUE)
paste0("Working = ", Working)
source()
library()
search()
packageVersion("dplyr")
df <- data.frame(z = 1:3)
df
df %>% dplyr::rename(a = z)
library(magg)
library(magrittr)
df %>% dplyr::rename(a = z)
df %>% dplyr::rename("a" = z)
df %>% plyr::rename(c("z" = "a"))
library(magrittr)
df <- data.frame(z = 1:3)
df %>% dplyr::rename(a = z)
df %>% plyr::rename(c("z" = "a"))
sessionInfo()
df %>% dplyr::rename("a" = "a")
df %>% dplyr::rename("a" = "z")
f
df
df %>% dplyr::rename("z" = "a")
c("z" = "a")
"z" = "a"
a
z
usethis::use_package("plyr")
packageVersion("plyr")
packageVersion("rlang")
rename_expr <- rlang::enquo(section)
?enquo
?devtools::check()
?devtools::check_win()
?devtools::check_win_devel()
library(purexposure)
devtools::check()
devtools::check_cran()
rcmdcheck::revdep_check()
devtools::build_win()
library(purexposure)
fresno_clean <- pull_clean_pur(2004, "fresno", raw_pur_df = fresno_raw)
fresno_raw <- pull_raw_pur(years = 2004, counties = "fresno")
fresno_clean <- pull_clean_pur(2004, "fresno", raw_pur_df = fresno_raw)
fresno <- plot_county_application(fresno_clean)
clean_pur_df <- fresno_clean
county = NULL
pls = NULL
color_by = "amount"
percentile = c(0.25, 0.5, 0.75)
start_date = NULL
end_date = NULL
chemicals = "all"
fill_option = "viridis"
crop = FALSE
alpha = 1
if (is.null(pls)) {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- "section"
} else {
section_township <- "township"
}
} else {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- tolower(pls)
} else {
section_township <- "township"
}
}
if (!"county_code" %in% colnames(clean_pur_df)) {
stop(paste0("The clean_pur_df argument should be an unaltered data frame ",
"returned from the pull_clean_pur() function."))
}
if (is.null(county)) {
code <- unique(clean_pur_df$county_code)
if (length(code) > 1) {
counties <- paste(find_counties(code, "names"), collapse = ", ")
stop(paste0("Your clan_pur_df data frame has data for more than one ",
"county (", counties, "). You can specify which county to ",
"plot data for with the county argument."))
}
} else {
code <- find_counties(county)
}
if (length(code) != 1) {
stop(paste0("Since there is data for more than one county in your ",
"clean_pur_df data frame,\nspecify which county you would ",
"like to plot data for with the county argument."))
}
county_shp <- pull_spdf(code, section_township = section_township)
county_bbox <- as.data.frame(county_shp@bbox)
county_df <- spdf_to_df(county_shp)
county_df <- purexposure:::spdf_to_df(county_shp)
if (chemicals == "all") {
pur_df <- clean_pur_df
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
if (!chemicals %in% unique(clean_pur_df$chemical_class)) {
stop(paste0("The input clean_pur_df is summed by chemical_class,\nand the ",
"input chemicals argument does not match any unique values ",
"of chemical_class."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemical_class == chemicals)
} else {
if (!toupper(chemicals) %in% unique(clean_pur_df$chemname)) {
stop(paste0("The input chemicals argument does not match any unique ",
"values\nof active ingredients (the chemname column) in the ",
"input clean_pur_df data frame."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemname == toupper(chemicals))
}
if (!is.null(start_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (!is.null(end_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(section) %>%
plyr::rename(c("section" = "pls")) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(township) %>%
plyr::rename(c("township" = "pls")) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
library(magrittr)
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(section) %>%
plyr::rename(c("section" = "pls")) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(township) %>%
plyr::rename(c("township" = "pls")) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
if (color_by == "percentile") {
cutpoints_list <- help_categorize(section_data = pur_df2, buffer_or_county = "buffer",
percentile = percentile) # find cutpoints based on
# given data frame
pur_df3 <- cutpoints_list$df
labels <- cutpoints_list$categories
cutoff_values <- cutpoints_list$cutoff_values
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
if (section_township == "section") {
county_df <- county_df %>% plyr::rename(c("MTRS" = "pls"))
} else if (section_township == "township") {
county_df <- county_df %>% plyr::rename(c("MTR" = "pls"))
}
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
head(pur_df3)
head(county_df)
colnames(pur_df3)[1] <- "pls"
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
gradient <- c("#FFFFFF", gradient)
plot <- ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
if (color_by == "amount") {
plot <- plot +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
} else if (color_by == "percentile") {
categories <- as.character(levels(pur_spatial$category))
if (!"None recorded" %in% categories) {
categories <- c(categories, "missing")
}
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
cols_out <- c(cols_out, "#FFFFFF")
names(cols_out) <- categories
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
}
plot <- plot +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
if (crop) {
long_range <- grDevices::extendrange(pur_spatial$long)
lat_range <- grDevices::extendrange(pur_spatial$lat)
plot <- plot + ggplot2::coord_map(xlim = long_range, ylim = lat_range)
}
if (color_by == "percentile") {
out <- list(map = plot, data = pur_df3, cutoff_values = cutoff_values)
} else {
out <- list(map = plot, data = pur_df3)
}
out
fill_option
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
gradient <- c("#FFFFFF", gradient)
gradient
ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
plot <- ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
color_by
plot +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
plot +
purexposure:::scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
pur_df2
df_out
library(purexposure)
fresno <- plot_county_application(fresno_clean)
fresno
devtools::build_win()
library(purexposure)
search()
clean_pur_df <- fresno_clean
fresno_clean <- pull_clean_pur(2004, "fresno")
clean_pur_df <- fresno_clean
county = NULL
pls <- "township"
color_by <- "percentile"
percentile = c(0.2, 0.4, 0.6, 0.8)
start_date = NULL
end_date = NULL
chemicals = "all"
fill_option <- "magma"
crop <- TRUE
alpha = 1
if (is.null(pls)) {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- "section"
} else {
section_township <- "township"
}
} else {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- tolower(pls)
} else {
section_township <- "township"
}
}
if (!"county_code" %in% colnames(clean_pur_df)) {
stop(paste0("The clean_pur_df argument should be an unaltered data frame ",
"returned from the pull_clean_pur() function."))
}
if (is.null(county)) {
code <- unique(clean_pur_df$county_code)
if (length(code) > 1) {
counties <- paste(find_counties(code, "names"), collapse = ", ")
stop(paste0("Your clan_pur_df data frame has data for more than one ",
"county (", counties, "). You can specify which county to ",
"plot data for with the county argument."))
}
} else {
code <- find_counties(county)
}
if (length(code) != 1) {
stop(paste0("Since there is data for more than one county in your ",
"clean_pur_df data frame,\nspecify which county you would ",
"like to plot data for with the county argument."))
}
county_shp <- pull_spdf(code, section_township = section_township)
county_bbox <- as.data.frame(county_shp@bbox)
county_df <- spdf_to_df(county_shp)
county_df <- purexposure:::spdf_to_df(county_shp)
if (chemicals == "all") {
pur_df <- clean_pur_df
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
if (!chemicals %in% unique(clean_pur_df$chemical_class)) {
stop(paste0("The input clean_pur_df is summed by chemical_class,\nand the ",
"input chemicals argument does not match any unique values ",
"of chemical_class."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemical_class == chemicals)
} else {
if (!toupper(chemicals) %in% unique(clean_pur_df$chemname)) {
stop(paste0("The input chemicals argument does not match any unique ",
"values\nof active ingredients (the chemname column) in the ",
"input clean_pur_df data frame."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemname == toupper(chemicals))
}
if (!is.null(start_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (!is.null(end_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(section) %>%
plyr::rename(c("section" = "pls")) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(township) %>%
plyr::rename(c("township" = "pls")) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
library(magrittr)
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(section) %>%
plyr::rename(c("section" = "pls")) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(township) %>%
plyr::rename(c("township" = "pls")) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
if (color_by == "percentile") {
cutpoints_list <- help_categorize(section_data = pur_df2, buffer_or_county = "buffer",
percentile = percentile) # find cutpoints based on
# given data frame
pur_df3 <- cutpoints_list$df
labels <- cutpoints_list$categories
cutoff_values <- cutpoints_list$cutoff_values
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
color_by == "percentile"
cutpoints_list <- purexposure:::help_categorize(section_data = pur_df2, buffer_or_county = "buffer",
percentile = percentile)
pur_df3 <- cutpoints_list$df
labels <- cutpoints_list$categories
cutoff_values <- cutpoints_list$cutoff_values
viridis_discrete <- TRUE
fill_var <- "category"
if (section_township == "section") {
county_df <- county_df %>% plyr::rename(c("MTRS" = "pls"))
} else if (section_township == "township") {
county_df <- county_df %>% plyr::rename(c("MTR" = "pls"))
}
colnames(pur_df3)[1] <- "pls"
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
plot <- ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
plot
color_by
categories <- as.character(levels(pur_spatial$category))
if (!"None recorded" %in% categories) {
categories <- c(categories, "missing")
}
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
categories
cols_out <- c(cols_out, "#FFFFFF")
names(cols_out) <- categories
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
if (color_by == "amount") {
plot <- plot +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
} else if (color_by == "percentile") {
categories <- as.character(levels(pur_spatial$category))
if (!"None recorded" %in% categories) {
categories <- c(categories, "missing")
}
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
cols_out <- c(cols_out, "#FFFFFF")
names(cols_out) <- categories
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
}
plot <- plot +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
if (crop) {
long_range <- grDevices::extendrange(pur_spatial$long)
lat_range <- grDevices::extendrange(pur_spatial$lat)
plot <- plot + ggplot2::coord_map(xlim = long_range, ylim = lat_range)
}
if (color_by == "percentile") {
out <- list(map = plot, data = pur_df3, cutoff_values = cutoff_values)
} else {
out <- list(map = plot, data = pur_df3)
}
out
source('~/Documents/purexposure/R/02-find.R')
source('~/Documents/purexposure/R/03-pull.R')
source('~/Documents/purexposure/R/05-plot.R')
find_chemical_codes
?find_chemical_codes
library(purexposure)
?find_chemical_codes
?find_counties
?find_location_county
?find_product_name
?pull_product_table
?pull_spdf
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
pull_clean_pur(2000, "100")
library(purexposure)
pull_clean_pur(2000, "100")
pull_clean_pur(2000, "blah")
purexposure::county_codes
devtools::document()
