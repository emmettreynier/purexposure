dplyr::ungroup() %>%
dplyr::rename(data_pls = data) %>%
dplyr::mutate(none_recorded = NA)
for (i in 1:nrow(pls_data)) {
data_pls_df <- pls_data$data_pls[[i]]
if (all(data_pls_df$none_recorded == TRUE)) {
pls_data$none_recorded[i] <- TRUE
} else {
pls_data$none_recorded[i] <- FALSE
}
pls_data$data_pls[[i]] <- pls_data$data_pls[[i]] %>%
dplyr::mutate(kg = ifelse(kg == 0, NA, kg),
kg_intersection = ifelse(kg_intersection == 0, NA, kg))
}
pls_data <- pls_data %>% dplyr::select(1:4, 6, 5)
nrow(pls_data)
i <- 1
start_date <- pls_data$start_date[i]
end_date <- pls_data$end_date[i]
chemicals <- pls_data$chemicals[i]
aerial_ground <- pls_data$aerial_ground[i]
none_recorded <- pls_data$none_recorded[i]
data_pls <- pls_data$data_pls[[i]]
pls_df <- buffer_df %>%
dplyr::right_join(data_pls, by = "pls")
section_or_township <- unique(pls_df$section_or_township)
if (section_or_township == "MTRS") {
s_t <- "section"
} else if (section_or_township == "MTR") {
s_t <- "township"
}
legend_label <- paste0("Applied Pesticides\n(kg/", s_t, ")")
if (!none_recorded) {
full <- dplyr::filter(data_pls, percent > 0.999)
full_pls_df <- buffer_df %>%
dplyr::right_join(full, by = "pls") %>%
dplyr::select(long, lat, group, kg_intersection) %>%
dplyr::rename(kg = kg_intersection) %>%
unique()
partial <- dplyr::filter(data_pls, percent <= 0.999)
partial_pls_df <- buffer_df %>%
dplyr::right_join(partial, by = "pls")
pls_partials <- unique(partial_pls_df$pls)
if (length(pls_partials) != 0) {
for (i in 1:length(pls_partials)) {
df2 <- dplyr::filter(partial_pls_df, pls == pls_partials[i])
pls <- dplyr::select(df2, long, lat)
pls <- pls[grDevices::chull(pls), ]
pls <- methods::as(pls, "gpc.poly")
suppressWarnings(
intersection <- raster::intersect(pls, buffer)
)
# Warning message:
#   In `[<-`(`*tmp*`, i, value = gpc) :
#   implicit list embedding of S4 objects is deprecated
int_df <- as.data.frame(methods::as(intersection, "matrix")) %>%
dplyr::rename(long = x, lat = y) %>%
dplyr::mutate(group = paste0("int", i),
kg = unique(df2$kg_intersection))
if (i == 1) {
out_int <- int_df
} else {
out_int <- rbind(out_int, int_df)
}
}
if (nrow(full_pls_df) != 0) {
section_data <- rbind(out_int, full_pls_df)
} else {
section_data <- out_int
}
} else if (nrow(full_pls_df) != 0) {
section_data <- full_pls_df
}
plot <- section_data %>%
ggplot2::ggplot() +
ggplot2::theme_void() +
ggplot2::coord_map()
if (color_by == "amount") {
if (buffer_or_county == "buffer") {
plot <- plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group, fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
} else {
##
if (!is.na(aerial_ground)) {
clean_pur <- clean_pur %>%
dplyr::filter(aerial_ground == aerial_ground)
}
if (chemicals != "all") {
if ("chemical_class" %in% colnames(clean_pur)) {
clean_pur <- clean_pur %>%
dplyr::filter(chemical_class == chemicals)
}
}
if (s_t == "section") {
clean_pur2 <- clean_pur %>%
dplyr::filter(date >= lubridate::ymd(start_date) &
date <= lubridate::ymd(end_date)) %>%
dplyr::group_by(section) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE))
} else if (s_t == "township") {
clean_pur2 <- clean_pur %>%
dplyr::filter(date >= lubridate::ymd(start_date) &
date <= lubridate::ymd(end_date)) %>%
dplyr::group_by(township) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE))
}
clean_pur3 <- clean_pur2 %>%
dplyr::mutate(source = "county")
limits <- c(min(clean_pur3$kg, na.rm = TRUE),
max(clean_pur3$kg, na.rm = TRUE))
##
plot <- plot +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group,
fill = kg),
color = "black") +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
limits = limits, na.value = "#FFFFFF")
}
} else if (color_by == "percentile") {
cutpoint_list <- help_categorize(section_data,
buffer_or_county = buffer_or_county,
start_date, end_date, aerial_ground,
chemicals, clean_pur, s_t, percentile)
cutoff_values <- cutpoint_list$cutoff_values
section_data2 <- cutpoint_list$df
categories <- cutpoint_list$categories
if ("None recorded" %in% categories) {
n_cols <-  as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories)-1
} else {
n_cols <- as.integer(length(gradient)/length(categories))
end_i <- length(categories)
}
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
out <- col_vec
} else {
out <- c(out, col_vec)
}
}
if ("None recorded" %in% categories) {
out <- c(out, "#FFFFFF")
}
names(out) <- categories
plot <- plot +
ggplot2::geom_polygon(data = section_data2,
ggplot2::aes(x = long, y = lat, group = group,
fill = category), color = "black") +
ggplot2::scale_fill_manual(values = out, name = legend_label)
}
plot <- plot + ggplot2::geom_polygon(data = buffer_df,
ggplot2::aes(x = long, y = lat, group = group),
color ="black", fill = NA) +
ggplot2::geom_point(x = location_longitude, y = location_latitude, size = 2)
if (pls_labels) {
df_all <- dplyr::select(pls_df, pls, DDLONG, DDLAT) %>% unique()
plot <- plot +
ggplot2::geom_text(data = df_all, ggplot2::aes(x = DDLONG, y = DDLAT,
label = pls),
size = pls_labels_size, fontface = "bold")
}
data_pls <- data_pls %>%
dplyr::mutate(start_date = zoo::as.Date(start_date),
end_date = zoo::as.Date(end_date),
chemicals = chemicals, aerial_ground = aerial_ground) %>%
dplyr::select(pls, percent, kg, kg_intersection, start_date, end_date,
chemicals, aerial_ground, none_recorded, location, radius,
area)
} else {
missing_buffer_df <- buffer_df %>% dplyr::mutate(perc_fill = "None recorded",
scale_fill = "0")
if (color_by == "percentile") {
missing_plot <- ggplot2::ggplot(missing_buffer_df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group,
fill = perc_fill), color = "black") +
ggplot2::geom_point(x = location_longitude, y = location_latitude, color = "black",
size = 2) +
ggplot2::theme_void() +
ggplot2::scale_fill_manual(name = legend_label, values = c("None recorded" = NA))
} else if (color_by == "amount") {
missing_plot <- ggplot2::ggplot(missing_buffer_df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group,
fill = scale_fill), color = "black") +
ggplot2::geom_point(x = location_longitude, y = location_latitude, color = "black",
size = 2) +
ggplot2::theme_void() +
ggplot2::scale_fill_manual(name = legend_label, values = c("0" = NA))
}
plot <- missing_plot
start_date <- zoo::as.Date(start_date)
end_date <- zoo::as.Date(end_date)
data_pls <- data.frame(pls = "ALL", percent = NA,
kg = 0, kg_intersection = NA,
start_date = start_date,
end_date = end_date,
chemicals = NA,
aerial_ground = NA,
none_recorded = TRUE,
location = unique(data_pls$location),
radius = unique(data_pls$radius),
area = unique(data_pls$area))
cutoff_values <- data.frame(percentile = percentile, kg = NA)
}
cutoff_values
if (color_by == "amount") {
return(list(plot = plot, data = data_pls))
} else if (color_by == "percentile") {
return(list(plot = plot, data = data_pls, cutoff_values = cutoff_values))
}
plot
legend_label
ggplot2::ggplot(missing_buffer_df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group,
fill = perc_fill), color = "black")
cutpoint_list <- help_categorize(section_data,
buffer_or_county = buffer_or_county,
start_date, end_date, aerial_ground,
chemicals, clean_pur, s_t, percentile)
cutoff_values <- cutpoint_list$cutoff_values
section_data2 <- cutpoint_list$df
categories <- cutpoint_list$categories
if ("None recorded" %in% categories) {
n_cols <-  as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories)-1
} else {
n_cols <- as.integer(length(gradient)/length(categories))
end_i <- length(categories)
}
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
out <- col_vec
} else {
out <- c(out, col_vec)
}
}
if ("None recorded" %in% categories) {
out <- c(out, "#FFFFFF")
}
names(out) <- categories
plot <- plot +
ggplot2::geom_polygon(data = section_data2,
ggplot2::aes(x = long, y = lat, group = group,
fill = category), color = "black") +
ggplot2::scale_fill_manual(values = out, name = legend_label)
plot
section_data2
cutpoint_list
?cut
chemical_df <- rbind(find_chemical_codes(2009, c("metam-sodium"))) %>%
dplyr::rename(chemical_class = chemical)
santa_maria <- pull_clean_pur(2008:2010, "santa barbara",
chemicals = chemical_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_df) %>%
calculate_exposure(location = "-119.6122, 34.90635",
radius = 3000,
time_period = "1 year",
chemicals = "chemical_class") %>%
plot_exposure(color_by = "percentile")
library(purexposure)
chemical_df <- rbind(find_chemical_codes(2009, c("metam-sodium"))) %>%
dplyr::rename(chemical_class = chemical)
santa_maria <- pull_clean_pur(2008:2010, "santa barbara",
chemicals = chemical_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_df) %>%
calculate_exposure(location = "-119.6122, 34.90635",
radius = 3000,
time_period = "1 year",
chemicals = "chemical_class") %>%
plot_exposure(color_by = "percentile")
library(purexposure)
chemical_df <- rbind(find_chemical_codes(2009, c("metam-sodium"))) %>%
dplyr::rename(chemical_class = chemical)
santa_maria <- pull_clean_pur(2008:2010, "santa barbara",
chemicals = chemical_df$chemname,
sum_application = TRUE,
sum = "chemical_class",
chemical_class = chemical_df) %>%
calculate_exposure(location = "-119.6122, 34.90635",
radius = 3000,
time_period = "1 year",
chemicals = "chemical_class") %>%
plot_exposure(color_by = "percentile")
warnings()
do.call("rbind", santa_maria$exposure)
santa_maria$maps[[1]]
santa_maria$maps[[2]]
santa_maria$maps[[3]]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
plot_sun_empire <- plot_exposure(sun_empire)
sun_empire <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500)
plot_sun_empire <- plot_exposure(sun_empire)
plot_sun_empire$maps
plot_exposure(sun_empire, color_by = "percentile")$maps
plot_sun_empire$pls_data
plot_sun_empire <- plot_exposure(sun_empire, color_by = "percentile")
plot_sun_empire$pls_data
plot_sun_empire$cutoff_values
?plot_exposure
plot_exposure(sun_empire, color_by = "percentile", buffer_or_county = "buffer")$maps
plot_exposure(sun_empire, color_by = "percentile", buffer_or_county = "buffer")$maps
sun_empire
plot_exposure(sun_empire, color_by = "percentile")$maps
plot_sun_empire$maps
sun_empire
plot_sun_empire <- plot_exposure(sun_empire)
plot_sun_empire
plot_sun_empire$maps
knitr::include_graphics("figures/se_map1.png")
plot_exposure(sun_empire, color_by = "percentile")$maps
knitr::include_graphics("figures/se_map2.png")
plot_county_application(sun_empire)
sun_empire <- pull_clean_pur(2015, "fresno")
plot_county_application(sun_empire)
schools <- readRDS("~/Documents/pesticides_project/data/fresno_schools.rds")
head(schools)
grep("terry", schools$School, ignore.case = TRUE, value = TRUE)
filter(schools, School == "Terry Elementary")
filter(schools, School == "Terry Elementary")$full_address
terry_elemen <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "12906 South Fowler Ave., Selma, CA",
radius = 1500)
plot_exposure(terry_elemen)
terry_elemen <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "12906 South Fowler Ave., Selma, CA",
radius = 2500)
plot_exposure(terry_elemen)
terry_elemen <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "12906 South Fowler Ave., Selma, CA",
radius = 1500)
plot_exposure(terry_elemen)
terry_elemen <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "12906 South Fowler Ave., Selma, CA",
radius = 2000)
plot_exposure(terry_elemen)
terry_elemen <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "12906 South Fowler Ave., Selma, CA",
radius = 1750)
plot_exposure(terry_elemen)
schools
filter(schools, School == "Monroe Elementary")
filter(schools, School == "Monroe Elementary")$full_address
monroe_elemen <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "11842 South Chestnut Ave., Fresno, CA",
radius = 1500)
plot_exposure(monroe_elemen)
plot_exposure(monroe_elemen, color_by = "percentile")
monroe <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "11842 South Chestnut Ave., Fresno, CA",
radius = 1500)
sun_empire$exposure
monroe$exposure
monroe$meta_data %>% slice(1:3)
monroe$meta_data %>%
mutate(kg_intersection = percent*kg) %>%
group_by(chemicals, start_date, end_date, aerial_ground) %>%
summarise(sum = sum(kg_intersection),
area = first(area)) %>%
mutate(exposure = sum/area) %>%
select(exposure, 1:4)
df_plot(monroe$buffer_plot_df)
df_plot(monroe$buffer_plot_df)
knitr::include_graphics("figures/monroe_plot.png")
monroe$county_plot
sun_empire$clean_pur_df %>% head(2)
monroe$clean_pur_df %>% head(2)
monroe2 <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "11842 South Chestnut Ave., Fresno, CA",
radius = 1500,
time_period = "4 months")
monroe2$exposure
plot_monroe <- plot_exposure(monroe)
names(plot_monroe)
plot_monroe$maps
plot_monroe$maps
knitr::include_graphics("figures/m_map1.png")
plot_exposure(monroe, color_by = "percentile")$maps
plot_exposure(monroe, color_by = "percentile")$maps
knitr::include_graphics("figures/m_map2.png")
plot_exposure(monroe, color_by = "percentile")$maps
knitr::include_graphics("figures/m_map2.png")
plot_monroe$maps
knitr::include_graphics("figures/m_map1.png")
plot_m_percentile <- plot_exposure(monroe, color_by = "percentile")
plot_m_percentile$cutoff_values
plot_exposure(monroe, buffer_or_county = "buffer")$maps
plot_exposure(monroe, buffer_or_county = "buffer")$maps
knitr::include_graphics("figures/m_map3.png")
plot_exposure(monroe,
fill_option = "density",
alpha = 0.5,
pls_labels = TRUE,
pls_labels_size = 3.5)$maps
plot_exposure(monroe,
fill_option = "density",
alpha = 0.5,
pls_labels = TRUE,
pls_labels_size = 3.5)$maps
knitr::include_graphics("figures/m_map4.png")
monroe2$exposure
plot_monroe2 <- plot_exposure(monroe2, color_by = "percentile")
maps <- plot_monroe2$maps
multiplot(maps[[1]], maps[[2]], maps[[3]], cols = 2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(maps[[1]], maps[[2]], maps[[3]], cols = 2)
multiplot(maps[[1]], maps[[2]], maps[[3]], cols = 2)
knitr::include_graphics("figures/m_plots.png")
monroe$clean_pur_df <- monroe$clean_pur_df[1:2,]
monroe$county_plot <- "null"
save(monroe, file = "data/monroe.RData")
monroe_plot <- df_plot(monroe$buffer_plot_df)
load("data/monroe.RData")
names(monroe)
monroe$meta_data %>% slice(1:3)
monroe$meta_data %>%
mutate(kg_intersection = percent*kg) %>%
group_by(chemicals, start_date, end_date, aerial_ground) %>%
summarise(sum = sum(kg_intersection),
area = first(area)) %>%
mutate(exposure = sum/area) %>%
select(exposure, 1:4)
monroe2$meta_data <- "null"
monroe2$buffer_plot_df <- "null"
monroe2$county_plot <- "null"
monroe2$clean_pur_df <- "null"
save(monroe2, file = "data/monroe2.RData")
load("data/monroe2.RData")
monroe2$exposure
plot_monroe$maps <- "null"
plot_monroe$pls_data <- "null"
plot_monroe$exposure <- "null"
save(plot_monroe, file = "data/plot_monroe.RData")
load("data/plot_monroe.RData")
names(plot_monroe)
plot_m_percentile$maps <- "null"
plot_m_percentile$pls_data <- "null"
plot_m_percentile$exposure <- "null"
save(plot_m_percentile, file = "data/plot_m_percentile.RData")
load("data/plot_m_percentile.RData")
plot_m_percentile$cutoff_values
fresno_clean <- pull_clean_pur(2004, "fresno")
plot_county_application(fresno_clean, pls = "township",
color_by = "percentile",
percentile = c(0.2, 0.4, 0.6, 0.8),
fill_option = "magma",
crop = TRUE)$map
county <- "fresno"
section_township <- "section"
library(purexposure)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
fresno_clean <- pull_clean_pur(2004, "fresno")
plot_county_application(fresno_clean, pls = "township",
color_by = "percentile",
percentile = c(0.2, 0.4, 0.6, 0.8),
fill_option = "magma",
crop = TRUE)$map
plot_county_application(fresno_clean, pls = "township",
color_by = "percentile",
percentile = c(0.2, 0.4, 0.6, 0.8),
fill_option = "magma",
crop = TRUE)$map
plot_county_application(fresno_clean, pls = "township",
color_by = "percentile",
percentile = c(0.2, 0.4, 0.6, 0.8),
fill_option = "magma",
crop = TRUE)$map
knitr::include_graphics("figures/fresno_plot2.png")
