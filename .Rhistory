color = "grey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure))
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "grey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void()
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void()
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_manual(name = expression(paste("Exposure, ",
"kg/", "m"^{
2
})))
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void()
?ggplot2::scale_fill_manual
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_color_manual(name = expression(paste("Exposure, ",
"kg/", "m"^{
2
})))
expression(paste("Exposure, ",
"kg/", "m"^{
2
}))
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_manual(name = expression(paste("Exposure, ", "kg/", "m"^{2})))
plot <- ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradient(name = expression(paste("Exposure, ", "kg/", "m"^{2})))
plot
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradient(name = expression(paste("Exposure (", "kg/", "m"^{2}, ")")))
unlist(colormap::colormaps)
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
colormaps_vec
?scale_fill_gradient
fill_option = "viridis"
gradient <- colormap::colormap(fill_option, nshades = 1000)
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradient(colors = gradient,
name = expression(paste("Exposure (", "kg/", "m"^{2}, ")")))
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradient(colours = gradient,
name = expression(paste("Exposure (", "kg/", "m"^{2}, ")")))
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradientn(colours = gradient,
name = expression(paste("Exposure (", "kg/", "m"^{2}, ")")))
#'
#' @examples
#' \dontrun{
#' pull_clean_pur(1990:1992, "fresno") %>%
#'     dplyr::filter(chemname %in% toupper(c("methyl bromide", "sulfur"))) %>%
#'     plot_application_timeseries(facet = TRUE)
#'
#' pull_clean_pur(2000, "riverside") %>% plot_application_timeseries()
#' }
#' @export
plot_application_timeseries <- function(clean_pur_df, facet = FALSE,
axes = "fixed") {
if (facet) {
if ("chemname" %in% colnames(clean_pur_df)) {
plot <- clean_pur_df %>%
dplyr::group_by(date, chemname)
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
plot <- clean_pur_df %>%
dplyr::group_by(date, chemical_class)
}
} else {
plot <- clean_pur_df %>%
dplyr::group_by(date)
}
plot <- plot %>%
dplyr::summarise(kg_perday = sum(kg_chm_used, na.rm = TRUE)) %>%
ggplot2::ggplot(ggplot2::aes(x = date, y = kg_perday)) +
ggplot2::geom_line() +
ggplot2::theme_minimal() +
ggplot2::labs(x = "Application date",
y = "Kilograms of active ingredient\napplied per day ")
if (facet) {
if ("chemname" %in% colnames(clean_pur_df)) {
plot <- plot +
ggplot2::facet_wrap(~chemname, scales = axes)
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
plot <- plot +
ggplot2::facet_wrap(~chemical_class, scales = axes )
}
}
return(plot)
}
exposure_df
plot_locations_exposure(exposure_df)
plot_locations_exposure <- function(exposure_df, section_township = "section",
fill_option = "viridis") {
check <- nrow(exposure_df) == length(unique(exposure_df$location))
if (!check) {
stop("There should be one row per location in your exposure_df.")
}
for (i in 1:nrow(exposure_df)) {
buffer <- help_calculate_buffers(exposure_df[i,])
if (i == 1) {
buffer_out <- buffer
} else {
buffer_out <- bind_rows(buffer_out, buffer)
}
}
buffer_out <- buffer_out %>%
dplyr::full_join(dplyr::select(exposure_df, location, exposure), by = "location")
county <- find_location_county(exposure_df[1,]$location)$county
shp <- pull_spdf(county, section_township)
df <- spdf_to_df(shp)
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
gradient <- colormap::colormap(fill_option, nshades = 1000)
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
plot <- ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradientn(colours = gradient,
name = expression(paste("Exposure (",
"kg/", "m"^{2}, ")")))
return(plot)
}
plot_locations_exposure(exposure_df)
plot_locations_exposure(exposure_df)
?plot_exposure
plot_locations_exposure(exposure_df, "township")
exposure_df
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradientn(colours = gradient,
name = expression(paste("Exposure (",
"kg/", "m"^{2}, ")"))) +
ggplot2::geom_point(data = exposure_df, ggplot2::aes(x = longitude,
y = latitude,
label = location))
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradientn(colours = gradient,
name = expression(paste("Exposure (",
"kg/", "m"^{2}, ")"))) +
ggplot2::geom_point(data = exposure_df, ggplot2::aes(x = longitude,
y = latitude,
fill = location))
exposure_df
devtools::document()
?plot_locations_exposure
#'   \code{longitude}, and \code{latitude}. This data frame should be filtered
#'   so that there is one exposure value per location.
#' @param section_township Either "section" (the default) or "township". Specifies
#'   which PLS unit to plot the county by.
#' @inheritParams plot_county_application
#'
#' @return A plot with one point per location, colored by each location's
#' corresponding exposure value.
#'
#' @importFrom magrittr %>%
plot_locations_exposure <- function(exposure_df, section_township = "section",
fill_option = "viridis") {
check <- nrow(exposure_df) == length(unique(exposure_df$location))
if (!check) {
stop(paste0("Filter your exposure_df so that there is one row per location ",
"in your exposure_df."))
}
for (i in 1:nrow(exposure_df)) {
buffer <- help_calculate_buffers(exposure_df[i,])
if (i == 1) {
buffer_out <- buffer
} else {
buffer_out <- bind_rows(buffer_out, buffer)
}
}
buffer_out <- buffer_out %>%
dplyr::full_join(dplyr::select(exposure_df, location, exposure), by = "location")
county <- find_location_county(exposure_df[1,]$location)$county
shp <- pull_spdf(county, section_township)
df <- spdf_to_df(shp)
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
gradient <- colormap::colormap(fill_option, nshades = 1000)
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
plot <- ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
ggplot2::scale_fill_gradientn(colours = gradient,
name = expression(paste("Exposure (",
"kg/", "m"^{2}, ")")))
return(plot)
}
?purexposure
?write_exposure
schools <- readRDS("~/Documents/pesticides_project/data/fresno_schools.rds")
shcools
schools
schools$StreetAbr
schools$full_address
head(schools$full_address)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
rep(c("3333 American Ave., Fresno, CA 93725",
"1616 South Fruit Ave., Fresno, CA 93706",
"295 West Saginaw Ave., Caruthers, CA 93609"),
each = 3)
lubridate::ymd("2000-01-01")
library(lubridate)
lubridate::ymd("2000-01-01") %+m% 3
lubridate::ymd("2000-01-01") %m+% 3
lubridate::ymd("2000-01-01") %m+% months(3)
data.frame(location = rep(c("3333 American Ave., Fresno, CA 93725",
"1616 South Fruit Ave., Fresno, CA 93706",
"295 West Saginaw Ave., Caruthers, CA 93609"),
each = 2),
start_date = c("2000-01-01", "2000-01-01",
"2005-03-01", "2005-03-01",
"2005-05-01", "2005-05-01"),
end_date = c("2000-04-01", "2000-07-01",
"2005-06-01", "2005-09-01",
"2005-08-01", "2005-11-01"))
df <- readRDS("~/Desktop/schools_test4/exposure_df.rds")
df
locations_dates <- data.frame(location = rep(c("3333 American Ave., Fresno, CA 93725",
"1616 South Fruit Ave., Fresno, CA 93706",
"295 West Saginaw Ave., Caruthers, CA 93609"),
each = 2),
start_date = c("2000-01-01", "2000-01-01",
"2005-03-01", "2005-03-01",
"2005-05-01", "2005-05-01"),
end_date = c("2000-04-01", "2000-07-01",
"2005-06-01", "2005-09-01",
"2005-08-01", "2005-11-01"))
test <- find_location_county(unique(locations_dates$locations))
test
unique(locations_dates$locations)
locations_dates
test <- find_location_county(unique(locations_dates$location))
test <- find_location_county(as.character(unique(locations_dates$location)))
test
print(FALSE)
duplicate(test$county)
unique(test$county)
"Fresno"
?pull_clean_pur
fresno_data <- pull_clean_pur(c(2000, 2005), "fresno")
head(fresno_data)
save(fresno_data, file = "data/fresno_data.RData")
?write_exposure
write_exposure(clean_pur_df = fresno_data,
locations_dates_df = locations_dates,
radii = c(1500, 3000),
directory = "~/Documents/fresno_example")
df <- readRDS("~/Documents/fresno_example/exposure_df.rds")
save(df, file = "data/write_exp_data.RData")
exposure_df <- readRDS("~/Documents/fresno_example/exposure_df.rds")
save(exposure_df, file = "data/write_exp_data.RData")
load("data/write_exp_data.RData")
exposure_df
load("data/write_exp_data.RData")
load("data/exposure_df.RData")
head(exposure_df)
nrow(exposure_df)
head(exposure_df)
meta_data <- readRDS("~/Documents/fresno_example/meta.data.rds")
list.files("~/Documents/fresno_example")
meta_data <- readRDS("~/Documents/fresno_example/meta_data.rds")
exposure_df <- readRDS("~/Documents/fresno_example/exposure_df.rds")
save(exposure_df, file = "data/exposure_df.RData")
save(meta_data, file = "data/meta_data.RData")
meta_data <- readRDS("~/Documents/fresno_example/meta_data.rds")
save(meta_data, file = "data/meta_data.RData")
meta_data <- readRDS("~/Documents/fresno_example/meta_data.rds")
class(meta_data)
meta_data[[1]]
colnames(meta_data[[1]])
list.files("~/Documents/fresno_example")
list.files("~/Documents/fresno_example/exposure_plots")
devtools::document()
list.files("~/Documents/fresno_example/exposure_plots")
c("01_exposure_plot.png", "02_exposure_plot.png", "03_exposure_plot.png",
"04_exposure_plot.png", "05_exposure_plot.png", "06_exposure_plot.png",
"07_exposure_plot.png", "08_exposure_plot.png", "09_exposure_plot.png",
"10_exposure_plot.png", "11_exposure_plot.png", "12_exposure_plot.png")
?file.rename()
file.copy(from = "~/Documents/fresno_example/exposure_plots/01_exposure_plot.png",
to = "figures/01_exposure_plot.png")
knitr::include_graphics("figures/01_exposure_plot.png")
```{r echo = FALSE, fig.align = "center", fig.height = 3, fig.width = 3}
knitr::include_graphics("figures/01_exposure_plot.png")
?plot_exposure
fresno_data <- pull_clean_pur(c(2000, 2005), "fresno")
fresno_data
write_exposure(clean_pur_df = fresno_data,
locations_dates_df = locations_dates,
radii = c(1500, 3000),
directory = "~/Documents/fresno_example2", color_by = "percentile")
source('~/Documents/purexposure/R/06-write.R')
write_exposure(clean_pur_df = fresno_data,
locations_dates_df = locations_dates,
radii = c(1500, 3000),
directory = "~/Documents/fresno_example2", color_by = "percentile")
list.files("~/Documents/fresno_example2/exposure_plots/cutoff_values")
readRDS("~/Documents/fresno_example2/exposure_plots/cutoff_values/01_cutoff_values")
readRDS("~/Documents/fresno_example2/exposure_plots/cutoff_values/01_cutoff_values.rds")
list.files("~/Desktop")
file.copy("~/Desktop/ex_directory.png", "figures/ex_directory.png")
file.copy("~/Desktop/ex_directory.png", "vignettes/figures/ex_directory.png")
devtools::document9)
devtools::document()
?purexposure
?plot_locations_exposure
devtools::document
devtools::document()
load("data/exposure_df.rds")
load("vignettes/data/exposure_df.rds")
load("data/exposure_df.RData")
exposure_df
exposure_df[1:3,]
lubridate::ymd(c("2000-01-01", "2000-03-01"))
class(lubridate::ymd(c("2000-01-01", "2000-03-01")))
exposure_df %>% dplyr::filter(radius == 3000 &
end_date %in% c(lubridate::ymd(c("2000-04-01",
"2005-06-01",
"2005-08-01"))))
exposure_df %>% dplyr::filter(radius == 3000 &
end_date %in% c(lubridate::ymd(c("2000-04-01",
"2005-06-01",
"2005-08-01")))) %>%
plot_locations_exposure()
?plot_locations_exposrue
?plot_locations_exposure
exposure_df %>% dplyr::filter(radius == 3000 & end_date %in%
c(lubridate::ymd(c("2000-04-01", "2005-06-01",
"2005-08-01")))) %>%
plot_locations_exposure()
(exposure_df %>% dplyr::filter(radius == 3000 & end_date %in%
c(lubridate::ymd(c("2000-04-01", "2005-06-01",
"2005-08-01"))))) %>%
plot_locations_exposure()
?scale_fill_gradientn2
scale_fill_gradientn2()
scale_fill_gradientn2
devtools::document()
(exposure_df %>% dplyr::filter(radius == 3000 & end_date %in%
c(lubridate::ymd(c("2000-04-01", "2005-06-01",
"2005-08-01"))))) %>%
plot_locations_exposure(alpha = 0.5)
source('~/Documents/purexposure/R/05-plot.R')
(exposure_df %>% dplyr::filter(radius == 3000 & end_date %in%
c(lubridate::ymd(c("2000-04-01", "2005-06-01",
"2005-08-01"))))) %>%
plot_locations_exposure(alpha = 0.5)
source('~/Documents/purexposure/R/05-plot.R')
(exposure_df %>% dplyr::filter(radius == 3000 & end_date %in%
c(lubridate::ymd(c("2000-04-01", "2005-06-01",
"2005-08-01"))))) %>%
plot_locations_exposure(alpha = 0.5)
exposure_df
exposure_df <- exposure_df %>% dplyr::filter(radius == 3000 & end_date %in%
c(lubridate::ymd(c("2000-04-01", "2005-06-01",
"2005-08-01"))))
exposure_df
section_township = "section"
fill = "viridis"
alpha = 0.5
check <- nrow(exposure_df) == length(unique(exposure_df$location))
if (!check) {
stop(paste0("Filter your exposure_df so that there is one row per location ",
"in your exposure_df."))
}
for (i in 1:nrow(exposure_df)) {
buffer <- help_calculate_buffers(exposure_df[i,])
if (i == 1) {
buffer_out <- buffer
} else {
buffer_out <- bind_rows(buffer_out, buffer)
}
}
buffer_out <- buffer_out %>%
dplyr::full_join(dplyr::select(exposure_df, location, exposure), by = "location")
county <- find_location_county(exposure_df[1,]$location)$county
shp <- pull_spdf(county, section_township)
df <- spdf_to_df(shp)
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
gradient <- colormap::colormap(fill, nshades = 1000, alpha = alpha)
if (!fill %in% colormaps_vec) {
stop(paste0("The fill argument should be a color palette from the ",
"colormap package."))
}
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure)) +
ggplot2::coord_map() +
ggplot2::theme_void() +
scale_fill_gradientn2(colours = gradient, alpha = alpha,
name = expression(paste("Exposure (", "kg/", "m"^{2}, ")")))
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA)
ggplot2::ggplot(data = df) +
ggplot2::geom_polygon(ggplot2::aes(x = long, y = lat, group = group),
color = "lightgrey", fill = NA) +
ggplot2::geom_polygon(data = buffer_out, ggplot2::aes(x = long, y = lat,
group = location,
fill = exposure))
