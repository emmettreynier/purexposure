}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
gradient <- c("#FFFFFF", gradient)
county_df
pur_spatial
unique(pur_spatial$category)
dplyr::filter(pur_spatial, is.na(category))
plot <- ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
plot
plot +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
plot
categories <- unique(pur_spatial$category)
categories
"None recorded" %in% categories
if ("None recorded" %in% categories) {
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
} else {
n_cols <- as.integer(length(gradient)/length(categories))
end_i <- length(categories)
}
n_cols
end_i
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
out <- col_vec
} else {
out <- c(out, col_vec)
}
}
out
if ("None recorded" %in% categories) {
out <- c(out, "#FFFFFF")
}
out
names(out) <- categories
out
plot  +
ggplot2::scale_fill_manual(values = out, name = legend_label)
fill_option
plot <- plot  +
ggplot2::scale_fill_manual(values = out, name = legend_label)
plot <- plot +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
if (crop) {
long_range <- grDevices::extendrange(pur_spatial$long)
lat_range <- grDevices::extendrange(pur_spatial$lat)
plot <- plot + ggplot2::coord_map(xlim = long_range, ylim = lat_range)
}
devtools::load_all()
map_county_application(clean_pur_df, color_by = "percentile")
pur_spatial
unique(pur_spatial$category)
devtools::load_all)()
devtools::load_all()
map_county_application(clean_pur_df, color_by = "percentile")
plot
devtools::load_all()
map_county_application(clean_pur_df, color_by = "percentile")
if (is.null(pls)) {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- "section"
} else {
section_township <- "township"
}
} else {
section_township <- tolower(pls)
}
if (!"county_code" %in% colnames(clean_pur_df)) {
stop(paste0("The clean_pur_df argument should be an unaltered data frame ",
"returned from the pull_clean_pur() function."))
}
if (is.null(county)) {
code <- unique(clean_pur_df$county_code)
} else {
code <- find_counties(county)
}
if (length(code) != 1) {
stop(paste0("Since there is data for more than one county in your ",
"clean_pur_df data frame,\nspecify which county you would ",
"like to plot data for with the county argument."))
}
county_shp <- pull_spdf(code, section_township = section_township)
county_bbox <- as.data.frame(county_shp@bbox)
county_df <- spdf_to_df(county_shp)
if (chemicals == "all") {
pur_df <- clean_pur_df
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
if (!chemicals %in% unique(clean_pur_df$chemical_class)) {
stop(paste0("The input clean_pur_df is summed by chemical_class,\nand the ",
"input chemicals argument does not match any unique values ",
"of chemical_class."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemical_class == chemicals)
} else {
if (!toupper(chemicals) %in% unique(clean_pur_df$chemname)) {
stop(paste0("The input chemicals argument does not match any unique ",
"values\nof active ingredients (the chemname column) in the ",
"input clean_pur_df data frame."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemname == toupper(chemicals))
}
if (!is.null(start_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (!is.null(end_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(section) %>%
dplyr::rename(pls = section) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(township) %>%
dplyr::rename(pls = township) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
if (color_by == "percentile") {
cutpoints_list <- find_cutpoints(section_data = pur_df2, buffer_or_county = "buffer",
percentile = percentile) # find cutpoints based on
# given data frame
pur_df3 <- cutpoints_list$df
labels <- cutpoints_list$categories
cutoff_values <- cutpoints_list$cutoff_values
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
if (section_township == "section") {
county_df <- county_df %>% dplyr::rename(pls = MTRS)
} else if (section_township == "township") {
county_df <- county_df %>% dplyr::rename(pls = MTR)
}
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
gradient <- c("#FFFFFF", gradient)
plot <- ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
if (color_by == "amount") {
plot <- plot +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
} else if (color_by == "percentile") {
categories <- unique(pur_spatial$category)
# if ("None recorded" %in% categories) {
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
# } else {
#   n_cols <- as.integer(length(gradient)/length(categories))
#   end_i <- length(categories)
# }
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
out <- col_vec
} else {
out <- c(out, col_vec)
}
}
# if ("None recorded" %in% categories) {
out <- c(out, "#FFFFFF")
# }
names(out) <- categories
if (length(out) != length(categories)) {
stop("error... here")
}
plot <- plot  +
ggplot2::scale_fill_manual(values = out, name = legend_label)
}
plot <- plot +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
if (crop) {
long_range <- grDevices::extendrange(pur_spatial$long)
lat_range <- grDevices::extendrange(pur_spatial$lat)
plot <- plot + ggplot2::coord_map(xlim = long_range, ylim = lat_range)
}
if (color_by == "percentile") {
out <- list(map = plot, data = pur_df3, cutoff_values = cutoff_values)
} else {
out <- list(map = plot, data = pur_df3)
}
out
out
color_by
if (is.null(pls)) {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- "section"
} else {
section_township <- "township"
}
} else {
section_township <- tolower(pls)
}
if (!"county_code" %in% colnames(clean_pur_df)) {
stop(paste0("The clean_pur_df argument should be an unaltered data frame ",
"returned from the pull_clean_pur() function."))
}
if (is.null(county)) {
code <- unique(clean_pur_df$county_code)
} else {
code <- find_counties(county)
}
if (length(code) != 1) {
stop(paste0("Since there is data for more than one county in your ",
"clean_pur_df data frame,\nspecify which county you would ",
"like to plot data for with the county argument."))
}
if (chemicals == "all") {
pur_df <- clean_pur_df
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
if (!chemicals %in% unique(clean_pur_df$chemical_class)) {
stop(paste0("The input clean_pur_df is summed by chemical_class,\nand the ",
"input chemicals argument does not match any unique values ",
"of chemical_class."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemical_class == chemicals)
} else {
if (!toupper(chemicals) %in% unique(clean_pur_df$chemname)) {
stop(paste0("The input chemicals argument does not match any unique ",
"values\nof active ingredients (the chemname column) in the ",
"input clean_pur_df data frame."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemname == toupper(chemicals))
}
if (!is.null(start_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (!is.null(end_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(section) %>%
dplyr::rename(pls = section) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(township) %>%
dplyr::rename(pls = township) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
if (color_by == "percentile") {
cutpoints_list <- find_cutpoints(section_data = pur_df2, buffer_or_county = "buffer",
percentile = percentile) # find cutpoints based on
# given data frame
pur_df3 <- cutpoints_list$df
labels <- cutpoints_list$categories
cutoff_values <- cutpoints_list$cutoff_values
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
if (section_township == "section") {
county_df <- county_df %>% dplyr::rename(pls = MTRS)
} else if (section_township == "township") {
county_df <- county_df %>% dplyr::rename(pls = MTR)
}
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill_option %in% colormaps_vec) {
stop(paste0("The fill_option argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill_option, nshades = 1000, alpha = alpha)
gradient <- c("#FFFFFF", gradient)
plot <- ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
plot
if (color_by == "amount") {
plot <- plot +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
} else if (color_by == "percentile") {
categories <- unique(pur_spatial$category)
# if ("None recorded" %in% categories) {
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
# } else {
#   n_cols <- as.integer(length(gradient)/length(categories))
#   end_i <- length(categories)
# }
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
# if ("None recorded" %in% categories) {
cols_out <- c(cols_out, "#FFFFFF")
# }
names(cols_out) <- categories
if (length(cols_out) != length(categories)) {
stop("error... here")
}
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
}
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
plot
cols_out
n_cols
length(categories)
categories
categories <- c(categories, "missing")
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
n_cols
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
cols_out
cols_out <- c(cols_out, "#FFFFFF")
names(cols_out) <- categories
cols_out
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
plot
cols_out
categories
categories <- unique(pur_spatial$category)
categories
categories <- as.character(unique(pur_spatial$category))
categories
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
if (!"None recorded" %in% categories) {
categories <- c(categories, "missing")
}
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
cols_out <- c(cols_out, "#FFFFFF")
names(cols_out) <- categories
cols_out
class(pur_spatial$category)
unique(pur_spatial$category)
levels(pur_spatial$category)
is.character(pur_spatial$category)
as.character(levels(pur_spatial$category))
categories <- as.character(levels(pur_spatial$category))
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
if (!"None recorded" %in% categories) {
categories <- c(categories, "missing")
}
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
cols_out <- c(cols_out, "#FFFFFF")
names(cols_out) <- categories
cols_out
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
plot
devtools::load_all()
map_county_application(clean_pur_df, color_by = "percentile", fill_option = "warm")
map_county_application(clean_pur_df, color_by = "percentile", fill_option = "warm", crop = TRUE)
?map_exposure
devtools::document()
?map_exposure
devtools::document()
?map_exposure
devtools::document
devtools::document()
?greadient_n_pal2
?gradient_n_pal2
?colour_ramp
?continuous_scale
devtools::document()
devtools::document()
devtools::document()
?help_map_exp
?pull_pur_file
?find_counties
?pull_clean_pur
?sum_application
?calculate_exposure
devtools::document()
?help_calculate_exposure
?map_exposure
?help_map_exp
devtools::document()
?help_calc_exp
devtools::document()
packageVersion("tidyr")
packageVersion("ggmap")
packageVersion("colormap")
packageVersion(grDevices)
packageVersion("grDevices")
packageVersion("methods")
packageVersion("zoo")
getwd()
pull_product_table <- function(year) {
dir <- paste0("~/Documents/pesticides_project/data-raw/PUR/", year)
current_dir <- getwd()
setwd(dir)
product_file <- readr::read_csv("product.txt") %>%
dplyr::select(prodno, prodstat_ind, prodcut_name, show_regno,
aer_grnd_ind, formula_cd, full_exp_dt, full_iss_dt,
fumigant_sw, gen_pest_ind, lastup_dt, mfg_ref_sw,
prod_inac_dt, reg_dt, reg_type_ind, rodent_sw, rignlwrd_ind,
soilappl_sw, condreg_sw)
return(product_file)
}
product_list <- purrr::map(1990:2015, pull_product_table)
product_list <- purrr::map(1990:2015, pull_product_table)
pull_product_table <- function(year) {
dir <- paste0("~/Documents/pesticides_project/data-raw/PUR/", year)
current_dir <- getwd()
setwd(dir)
product_file <- readr::read_csv("product.txt") %>%
dplyr::select(prodno, prodstat_ind, product_name, show_regno,
aer_grnd_ind, formula_cd, full_exp_dt, full_iss_dt,
fumigant_sw, gen_pest_ind, lastup_dt, mfg_ref_sw,
prod_inac_dt, reg_dt, reg_type_ind, rodent_sw, rignlwrd_ind,
soilappl_sw, condreg_sw)
return(product_file)
}
product_list <- purrr::map(1990:2015, pull_product_table)
pull_product_table <- function(year) {
dir <- paste0("~/Documents/pesticides_project/data-raw/PUR/", year)
current_dir <- getwd()
setwd(dir)
product_file <- readr::read_csv("product.txt") %>%
dplyr::select(prodno, prodstat_ind, product_name, show_regno,
aer_grnd_ind, formula_cd, full_exp_dt, full_iss_dt,
fumigant_sw, gen_pest_ind, lastup_dt, mfg_ref_sw,
prod_inac_dt, reg_dt, reg_type_ind, rodent_sw, signlwrd_ind,
soilappl_sw, condreg_sw)
return(product_file)
}
product_list <- purrr::map(1990:2015, pull_product_table)
names(product_list) <- 1990:2015
product_list
usethis::use_data(product_list, overwrite = TRUE)
