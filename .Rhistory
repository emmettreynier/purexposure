}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.character(chemical_class$chemname)) {
stop("The chemname column should have character values.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.character(chemical_class$chemical_class)) {
stop("The chemical_class column should have character values.")
}
if (unit == "section") {
if (aerial_ground) {
out <- help_sum_application(out, "chemical_class", "section", TRUE,
section_townships,
chemical_class = chemical_class,
chemical_class, section, county_name,
pur_code, fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "chemical_class", "section", FALSE,
section_townships,
chemical_class = chemical_class,
chemical_class, section, county_name,
pur_code, fips_code, date)
}
} else if (unit == "township") {
if (aerial_ground) {
out <- help_sum_application(out, "chemical_class", "township", TRUE,
section_townships,
chemical_class = chemical_class,
chemical_class, township, county_name,
pur_code, fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "chemical_class", "township", FALSE,
section_townships,
chemical_class = chemical_class,
chemical_class, township, county_name,
pur_code, fips_code, date)
}
}
}
} else {
if (!aerial_ground) {
out <- out %>% dplyr::select(-aerial_ground)
}
}
source('~/Documents/purexposure/R/01-helpers.R')
if (sum_application) {
section_townships <- out %>%
dplyr::select(section, township) %>%
unique()
if (sum == "all") {
if (unit == "section") {
if (aerial_ground) {
out <- help_sum_application(out, "all", "section", TRUE,
section_townships,
chem_code,
chemname, section, county_name, pur_code,
fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "all", "section", FALSE,
section_townships,
chem_code,
chemname, section, county_name, pur_code,
fips_code, date)
}
} else if (unit == "township") {
if (aerial_ground) {
out <- help_sum_application(out, "all", "township", TRUE,
section_townships,
chem_code,
chemname, township, county_name, pur_code,
fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "all", "township", FALSE,
section_townships,
chem_code,
chemname, township, county_name, pur_code,
fips_code, date)
}
}
} else if (sum == "chemical_class") {
## error handling for chemical_class df
if (!is.null(chemical_class) & !is.data.frame(chemical_class)) {
stop("The chemical_class argument should be a data frame.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
!all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class"))) {
stop(writeLines(paste0("The data frame entered in the chemical class ",
"argument should have only three columns named chem_code, ",
"chemname, and chemical_class.")))
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.integer(chemical_class$chem_code)) {
stop("The chem_code column should have integer values.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.character(chemical_class$chemname)) {
stop("The chemname column should have character values.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.character(chemical_class$chemical_class)) {
stop("The chemical_class column should have character values.")
}
if (unit == "section") {
if (aerial_ground) {
out <- help_sum_application(out, "chemical_class", "section", TRUE,
section_townships,
chemical_class = chemical_class,
chemical_class, section, county_name,
pur_code, fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "chemical_class", "section", FALSE,
section_townships,
chemical_class = chemical_class,
chemical_class, section, county_name,
pur_code, fips_code, date)
}
} else if (unit == "township") {
if (aerial_ground) {
out <- help_sum_application(out, "chemical_class", "township", TRUE,
section_townships,
chemical_class = chemical_class,
chemical_class, township, county_name,
pur_code, fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "chemical_class", "township", FALSE,
section_townships,
chemical_class = chemical_class,
chemical_class, township, county_name,
pur_code, fips_code, date)
}
}
}
} else {
if (!aerial_ground) {
out <- out %>% dplyr::select(-aerial_ground)
}
}
source('~/Documents/purexposure/R/00-misc.R')
if (sum_application) {
section_townships <- out %>%
dplyr::select(section, township) %>%
unique()
if (sum == "all") {
if (unit == "section") {
if (aerial_ground) {
out <- help_sum_application(out, "all", "section", TRUE,
section_townships,
chem_code,
chemname, section, county_name, pur_code,
fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "all", "section", FALSE,
section_townships,
chem_code,
chemname, section, county_name, pur_code,
fips_code, date)
}
} else if (unit == "township") {
if (aerial_ground) {
out <- help_sum_application(out, "all", "township", TRUE,
section_townships,
chem_code,
chemname, township, county_name, pur_code,
fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "all", "township", FALSE,
section_townships,
chem_code,
chemname, township, county_name, pur_code,
fips_code, date)
}
}
} else if (sum == "chemical_class") {
## error handling for chemical_class df
if (!is.null(chemical_class) & !is.data.frame(chemical_class)) {
stop("The chemical_class argument should be a data frame.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
!all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class"))) {
stop(writeLines(paste0("The data frame entered in the chemical class ",
"argument should have only three columns named chem_code, ",
"chemname, and chemical_class.")))
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.integer(chemical_class$chem_code)) {
stop("The chem_code column should have integer values.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.character(chemical_class$chemname)) {
stop("The chemname column should have character values.")
}
if (!is.null(chemical_class) & is.data.frame(chemical_class) &
all(colnames(chemical_class) == c("chem_code", "chemname", "chemical_class")) &
!is.character(chemical_class$chemical_class)) {
stop("The chemical_class column should have character values.")
}
if (unit == "section") {
if (aerial_ground) {
out <- help_sum_application(out, "chemical_class", "section", TRUE,
section_townships,
chemical_class = chemical_class,
chemical_class, section, county_name,
pur_code, fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "chemical_class", "section", FALSE,
section_townships,
chemical_class = chemical_class,
chemical_class, section, county_name,
pur_code, fips_code, date)
}
} else if (unit == "township") {
if (aerial_ground) {
out <- help_sum_application(out, "chemical_class", "township", TRUE,
section_townships,
chemical_class = chemical_class,
chemical_class, township, county_name,
pur_code, fips_code, date, aerial_ground)
} else {
out <- help_sum_application(out, "chemical_class", "township", FALSE,
section_townships,
chemical_class = chemical_class,
chemical_class, township, county_name,
pur_code, fips_code, date)
}
}
}
} else {
if (!aerial_ground) {
out <- out %>% dplyr::select(-aerial_ground)
}
}
warnings()
if ("prodno" %in% colnames(out)) {
out <- out %>% dplyr::mutate(prodno = as.integer(prodno))
}
head(ot)
head(out)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
find_counties(c("01", "02", "03"), return = "names")
purexposure::county_codes %>% slice(1:3)
?slice
library(dplyr)
purexposure::county_codes %>% slice(1:3)
toy <- data.frame(x = 1:3)
dplyr::rename(x, y = x)
dplyr::rename(toy, y = x)
fresno_clean <- pull_clean_pur(2004, "fresno")
source('~/Documents/purexposure/R/03-pull.R')
fresno_clean <- pull_clean_pur(2004, "fresno")
fresno_clean
fresno_clean
fresno_clean <- fresno_clean[1:2,]
save(fresno_clean, file = "data/fresno_clean.RData")
load("vignettes/data/fresno_clean.RData")
head(fresno_clean, 2)
save(fresno_clean, file = "vignettes/data/fresno_clean.RData")
load("vignettes/data/fresno_clean.RData")
head(fresno_clean, 2)
fresno_clean
fresno_clean <- pull_clean_pur(2004, "fresno")
fresno_clean
fresno_clean <- fresno_clean[1:2,]
save(fresno_clean, file = "~/Documents/purexposure/vignettes/data/fresno_clean.RData")
head(fresno_clean)
load("~/Documents/purexposure/vignettes/data/fresno_clean.RData")
head(fresno_clean)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "vignettes"
)
nevada_sulfur <- pull_clean_pur(years = 2000, counties = "nevada", chemicals = "sulfur")
head(nevada_sulfur)
nevada_sulfur <- nevada_sulfur[1:2,]
save(nevada_sulfur, file = "~/Documents/purexposure/vignettes/data/nevada_sulfur.RData")
tulare <- pull_clean_pur(2010, "tulare",
sum_application = TRUE,
unit = "township",
aerial_ground = FALSE)
head(tulare)
tulare <- tulare %>% arrange(township) %>% slice(1:3)
tulare
save(tulare, file = "~/Documents/purexposure/vignettes/data/tulare.RData")
load("data/tulare.RData")
tulare %>% arrange(township) %>% slice(1:3)
chemical_class_df <- rbind(find_chemical_codes(2000, "methylene"),
find_chemical_codes(2000, "aldehyde")) %>%
plyr::rename(c("chemical" = "chemical_class"))
head(chemical_class_df, 2)
tail(chemical_class_df, 2)
fresno_classes <- pull_clean_pur(2008, "fresno", sum_application = TRUE,
unit = "section", sum = "chemical_class",
chemical_class = chemical_class_df,
aerial_ground = FALSE)
head(fresno_classes)
rbind(fresno_classes[1:3, ],
filter(fresno_classes, (chemical_class == "methylene") |
(chemical_class == "aldehyde" &
section == "M13S21E36" &
date == lubridate::ymd("2008-01-12"))))
fresno_classes <- rbind(fresno_classes[1:3, ],
filter(fresno_classes, (chemical_class == "methylene") |
(chemical_class == "aldehyde" &
section == "M13S21E36" &
date == lubridate::ymd("2008-01-12"))))
save(fresno_classes, file = "vignettes/data/fresno_classes.RData")
load("data/fresno_classes.RData")
head(fresno_classes, 3)
unique(fresno_classes$chemical_class)
?pull_clean_pur
sun_empire <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500)
sun_empire
?calculate_exposure
sun_empire$clean_pur_df <- sun_empire$clean_pur_df[1:2,]
sun_empire$county_plot <- "null"
save(sun_empire, file = "vignettes/data/sun_empire.RData")
sun_empire_plot <- df_plot(sun_empire$buffer_plot_df)
sun_empire_plot
sun_empire$meta_data %>%
mutate(kg_intersection = percent*kg) %>%
group_by(chemicals, start_date, end_date, aerial_ground) %>%
summarise(sum = sum(kg_intersection),
area = first(area)) %>%
mutate(exposure = sum/area) %>%
select(exposure, 1:4)
sun_empire$meta_data %>% slice(1:3)
df_plot(sun_empire$buffer_plot_df)
knitr::include_graphics("figures/sun_empire_plot.png")
knitr::include_graphics("figures/sun_empire_county_plot.png")
sun_empire$clean_pur_df %>% head(2)
sun_empire2 <- pull_clean_pur(2015, "fresno") %>%
calculate_exposure(location = "2649 North Modoc Ave., Kerman, CA",
radius = 1500,
time_period = "4 months")
sun_empire2$meta_data <- "null"
sun_empire2$buffer_plot_df <- "null"
sun_empire2$county_plot <- "null"
sun_empire2$clean_pur_df <- "null"
save(sun_empire2, file = "vignettes/data/sun_empire2.RData")
load("data/sun_empire2.RData")
sun_empire2$exposure
knitr::include_graphics("figures/se_map1.png")
fresno <- plot_county_application(fresno_clean)
fresno_clean %>%
filter(chemname %in% toupper(c("sulfur", "sodium chlorate"))) %>%
plot_application_timeseries(facet = TRUE)
fresno_clean
knitr::include_graphics("figures/timeseries2.png")
knitr::include_graphics("figures/timeseries3.png")
knitr::include_graphics("figures/timeseries4.png")
knitr::include_graphics("figures/se_map2.png")
plot_se_percentile$cutoff_values
load("data/plot_se_percentile.RData")
plot_se_percentile$cutoff_values
?plot_exposure
fresno_clean
fresno_clean <- pull_clean_pur(2004, "fresno")
fresno_clean %>%
filter(chemname %in% toupper(c("sulfur", "sodium chlorate"))) %>%
plot_application_timeseries(facet = TRUE)
?plot_application_timeseries
?pull_clean_pur
kern <- pull_clean_pur(2013:2015, "kern")
head(kern)
?purexposure
plot_county_application(kern)
plot_county_application(kern)
plot_application_timeseries(kern)
knitr::include_graphics("figures/timeseries1.png")
find_chemical_codes(2013, c("telone"))
find_product_name(2013, "telone")
?plot_application_timeseries
find_chemical_codes(2013, "metam potassium")
find_product_name(2013, "metam potassium")
find_chemical_codes(2013, "metam")
find_product_name(2013, "metam")
fidn_chemical_codes(2013, "chlorpyrifos")
find_chemical_codes(2013, "chlorpyrifos")
telone <- find_product_name(2013, "telone")
telonw
telone
kern_telone <- filter(kern, prodno %in% telone$prodno)
kern_telone
unique(kern_telone$chemname)
all <- kern_telone$chemname
all
find_chemical_codes(2013, "chlorpyrifos")
head(kern)
toupper(c("chorpyrifos", "1,3-dichloropropene"))
1,3-DICHLOROPROPENE
kern %>% filter(chemname %in% toupper(c("chorpyrifos", "1,3-dichloropropene"))) %>%
plot_application_timeseries(facet = TRUE)
head(kern)
kern %>% filter(chemname %in% toupper(c("chlorpyrifos", "1,3-dichloropropene"))) %>%
plot_application_timeseries(facet = TRUE)
plot_application_timeseries(kern)
kern <- pull_clean_pur(2014:2015, "kern")
plot_application_timeseries(kern)
kern %>%
filter(chemname %in% toupper(c("1,3-dichloropropene", "chlorpyrifos"))) %>%
plot_application_timeseries(facet = TRUE)
kern %>%
filter(chemname %in% toupper(c("1,3-dichloropropene", "chlorpyrifos"))) %>%
plot_application_timeseries(facet = TRUE, axes = "free_y")
plot_application_timeseries(kern) +
ggplot2::theme_classic()
kern <- pull_clean_pur(2015, "kern")
plot_application_timeseries(kern)
kern %>%
filter(chemname %in% toupper(c("1,3-dichloropropene", "chlorpyrifos"))) %>%
plot_application_timeseries(facet = TRUE)
kern %>%
filter(chemname %in% toupper(c("1,3-dichloropropene", "chlorpyrifos"))) %>%
plot_application_timeseries(facet = TRUE, axes = "free_y")
plot_application_timeseries(kern) +
ggplot2::theme_classic()
noaastormevents:::download_storm_data
install.packages("noaastormevents")
noaastormevents:::download_storm_data()
noaastormevents:::download_storm_data
?tempfile
?download.file
?unzip
?new.env()
package_version(dplyr)
package_version("dplyr")
sessionInfo()
remove.packages("rlang")
sessionInfo()
install.packages("rlang")
install.packages("rlang")
sessionInfo()
library(rlang)
sessionInfo()
library(rgeos)
sessionInfo()
library(dplyr)
sessionInfo()
toy <- data.frame(x = 1)
dplyr::rename(toy, a = x)
?new.env
find_counties(c("02", "03"))
library(purexposure)
find_counties(c("02", "03"))
find_counties(c("03", "02"))
find_counties(c("03", "02"), return = "names")
find_counties(c("02", "03"), return = "names")
counties <- "all"
year <- 2000
quiet <- FALSE
current_dir <- getwd()
url <- paste0("ftp://transfer.cdpr.ca.gov/pub/outgoing/pur_archives/pur",
year, ".zip")
file <- paste0("pur", year, ".zip")
!exists("purexposure_package_env")
dir <- tempdir()
setwd(dir)
url
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
list.files()
counties
codes <- find_counties(counties)
files <- grep(paste0("udf", sm_year, "_"), list.files(), value = TRUE)
sm_year <- substr(year, 3, 4)
files <- grep(paste0("udf", sm_year, "_"), list.files(), value = TRUE)
files
sm_year
files <- grep(paste0("udc", sm_year, "_"), list.files(), value = TRUE)
files
i <- 1
test <- help_read_in_counties(files[i], type = "files", year = year)
test
codes <- substr(files, 7, 8)
codes
counties
year
current_dir <- getwd()
url <- paste0("ftp://transfer.cdpr.ca.gov/pub/outgoing/pur_archives/pur",
year, ".zip")
file <- paste0("pur", year, ".zip")
!exists("purexposure_package_env")
dir <- tempdir()
setwd(dir)
utils::download.file(url, destfile = file, mode = "wb", quiet = quiet)
utils::unzip(file, exdir = dir)
purexposure_package_env <<- new.env()
purexposure_package_env$pur_lst <- list()
!"all" %in% counties
sm_year <- substr(year, 3, 4)
files <- grep(paste0("udc", sm_year, "_"), list.files(), value = TRUE)
codes <- substr(files, 7, 8)
for (i in 1:length(files)) {
purexposure_package_env$pur_list[[paste0(year, "_", codes[i])]] <-
help_read_in_counties(files[i], type = "files", year = year)
}
test <- purexposure_package_env$pur_lst[["2000_01"]]
head(test)
test
