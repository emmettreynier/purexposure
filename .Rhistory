perc <- as.data.frame(t(quantile(unique(pur_df2$kg),
probs = percentile, na.rm = TRUE)))
vec <- 0
for (i in 1:length(percentile)) {
vec <- c(vec, perc[, i])
}
vec <- c(vec, max(unique(pur_df2$kg), na.rm = TRUE))
perc_numbers <- as.character(percentile * 100)
first <- paste0("<=", perc_numbers[1], "th percentile")
last <- paste0(">=", perc_numbers[length(perc_numbers)], "th")
for (i in 1:(length(perc_numbers) - 1)) {
label <- paste0(">=", perc_numbers[i], "th to <", perc_numbers[i+1], "th")
if (i == 1) {
middle <- label
} else {
middle <- c(middle, label)
}
}
labels <- c(first, middle, last)
pur_df3 <- pur_df2 %>%
dplyr::mutate(category = as.character(cut(pur_df2$kg, vec, labels = labels)),
category = ifelse(is.na(category), "Missing", category))
if ("Missing" %in% unique(pur_df3$category)) {
pur_df3$category <- factor(pur_df3$category, levels = c(labels, "Missing"))
} else {
pur_df3$category <- factor(pur_df3$category, levels = labels)
}
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_data3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
pur_data3
viridis_discrete
fill_var
if (section_township == "section") {
county_df <- county_df %>% dplyr::rename(pls = MTRS)
} else if (section_township == "township") {
county_df <- county_df %>% dplyr::rename(pls = MTR)
}
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
pur_spatial
pur_df3
map_county_application <- function(clean_pur_df, county = NULL, pls = NULL,
color_by = "percentile",
percentile = c(0.25, 0.5, 0.75),
start_date = NULL, end_date = NULL,
chemicals = "all", fill_option = "viridis",
crop = FALSE) {
if (is.null(pls)) {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- "section"
pls_quo <- rlang::enquo(section)
} else {
section_township <- "township"
pls_quo <- rlang::enquo(section)
}
} else {
section_township <- tolower(pls)
if (section_township == "section") {
pls_quo <- rlang::enquo(section)
} else {
pls_quo <- rlang::enquo(township)
}
}
if (!"county_code" %in% colnames(clean_pur_df)) {
stop(paste0("The clean_pur_df argument should be an unaltered data frame ",
"returned from the pull_clean_pur() function."))
}
# pull county shapefile
if (is.null(county)) {
code <- unique(clean_pur_df$county_code)
} else {
code <- find_counties(county)
}
if (length(code) != 1) {
stop(paste0("Since there is data for more than one county in your ",
"clean_pur_df data frame,\nspecify which county you would ",
"like to plot data for with the county argument."))
}
county_shp <- pull_spdf(code, section_township = section_township)
county_bbox <- as.data.frame(county_shp@bbox)
county_df <- spdf_to_df(county_shp)
if (chemicals == "all") {
pur_df <- clean_pur_df
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
if (!chemicals %in% unique(clean_pur_df$chemical_class)) {
stop(paste0("The input clean_pur_df is summed by chemical_class,\nand the ",
"input chemicals argument does not match any unique values ",
"of chemical_class."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemical_class == chemicals)
} else {
if (!toupper(chemicals) %in% unique(clean_pur_df$chemname)) {
stop(paste0("The input chemicals argument does not match any unique ",
"values\nof active ingredients (the chemname column) in the ",
"input clean_pur_df data frame."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemname == toupper(chemicals))
}
if (!is.null(start_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (!is.null(end_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(section) %>%
dplyr::rename(pls = section) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(township) %>%
dplyr::rename(pls = township) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
# pur_df2 <- pur_df %>%
#   dplyr::filter(county_code == code) %>%
#   dplyr::group_by(!!pls_quo) %>% # this is throwing an error.
#   dplyr::rename(pls := !!pls_quo) %>%
#   dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
#   dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
if (color_by == "percentile") {
perc <- as.data.frame(t(quantile(unique(pur_df2$kg),
probs = percentile, na.rm = TRUE)))
vec <- 0
for (i in 1:length(percentile)) {
vec <- c(vec, perc[, i])
}
vec <- c(vec, max(unique(pur_df2$kg), na.rm = TRUE))
perc_numbers <- as.character(percentile * 100)
first <- paste0("<=", perc_numbers[1], "th percentile")
last <- paste0(">=", perc_numbers[length(perc_numbers)], "th")
for (i in 1:(length(perc_numbers) - 1)) {
label <- paste0(">=", perc_numbers[i], "th to <", perc_numbers[i+1], "th")
if (i == 1) {
middle <- label
} else {
middle <- c(middle, label)
}
}
labels <- c(first, middle, last)
pur_df3 <- pur_df2 %>%
dplyr::mutate(category = as.character(cut(pur_df2$kg, vec, labels = labels)),
category = ifelse(is.na(category), "Missing", category))
if ("Missing" %in% unique(pur_df3$category)) {
pur_df3$category <- factor(pur_df3$category, levels = c(labels, "Missing"))
} else {
pur_df3$category <- factor(pur_df3$category, levels = labels)
}
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
if (section_township == "section") {
county_df <- county_df %>% dplyr::rename(pls = MTRS)
} else if (section_township == "township") {
county_df <- county_df %>% dplyr::rename(pls = MTR)
}
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
plot <- ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var)) +
viridis::scale_fill_viridis(na.value = "white",
name = legend_label,
discrete = viridis_discrete,
option = fill_option) +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
if (crop) {
long_range <- grDevices::extendrange(pur_spatial$long)
lat_range <- grDevices::extendrange(pur_spatial$lat)
plot <- plot + ggplot2::coord_map(xlim = long_range, ylim = lat_range)
}
out <- list(plot = plot, data = pur_df3)
return(out)
}
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
if (color_by == "percentile") {
perc <- as.data.frame(t(quantile(unique(pur_df2$kg),
probs = percentile, na.rm = TRUE)))
vec <- 0
for (i in 1:length(percentile)) {
vec <- c(vec, perc[, i])
}
vec <- c(vec, max(unique(pur_df2$kg), na.rm = TRUE))
perc_numbers <- as.character(percentile * 100)
first <- paste0("<=", perc_numbers[1], "th percentile")
last <- paste0(">=", perc_numbers[length(perc_numbers)], "th")
for (i in 1:(length(perc_numbers) - 1)) {
label <- paste0(">=", perc_numbers[i], "th to <", perc_numbers[i+1], "th")
if (i == 1) {
middle <- label
} else {
middle <- c(middle, label)
}
}
labels <- c(first, middle, last)
pur_df3 <- pur_df2 %>%
dplyr::mutate(category = as.character(cut(pur_df2$kg, vec, labels = labels)),
category = ifelse(is.na(category), "Missing", category))
if ("Missing" %in% unique(pur_df3$category)) {
pur_df3$category <- factor(pur_df3$category, levels = c(labels, "Missing"))
} else {
pur_df3$category <- factor(pur_df3$category, levels = labels)
}
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
if (section_township == "section") {
county_df <- county_df %>% dplyr::rename(pls = MTRS)
} else if (section_township == "township") {
county_df <- county_df %>% dplyr::rename(pls = MTR)
}
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var)) +
viridis::scale_fill_viridis(na.value = "white",
name = legend_label,
discrete = viridis_discrete,
option = fill_option) +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
perc_numbers
perc <- as.data.frame(t(quantile(unique(pur_df2$kg),
probs = percentile, na.rm = TRUE)))
vec <- 0
for (i in 1:length(percentile)) {
vec <- c(vec, perc[, i])
}
vec <- c(vec, max(unique(pur_df2$kg), na.rm = TRUE))
perc_numbers <- as.character(percentile * 100)
first <- paste0("<=", perc_numbers[1], "th percentile")
last <- paste0(">=", perc_numbers[length(perc_numbers)], "th")
for (i in 1:(length(perc_numbers) - 1)) {
label <- paste0(">=", perc_numbers[i], "th to <", perc_numbers[i+1], "th")
if (i == 1) {
middle <- label
} else {
middle <- c(middle, label)
}
}
labels <- c(first, middle, last)
perc_numbers
perc
class(perc)
colnames(perc)
?gather
usethis::use_package("tidyr")
perc %>% tidyr::gather("percentile", "value")
colnames(perc)
?grepl
sub("%", "", colnames(perc))
sub("%", "", colnames(perc)) %>% as.numeric()
sub("%", "", colnames(perc)) %>% as.numeric() / 100
percents <- sub("%", "", colnames(perc)) %>% as.numeric() / 100
perc <- perc %>% tidyr::gather("percentile", "value") %>%
dplyr::mutate(percentile = percents)
perc
map_county_application <- function(clean_pur_df, county = NULL, pls = NULL,
color_by = "percentile",
percentile = c(0.25, 0.5, 0.75),
start_date = NULL, end_date = NULL,
chemicals = "all", fill_option = "viridis",
crop = FALSE) {
if (is.null(pls)) {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- "section"
} else {
section_township <- "township"
}
} else {
section_township <- tolower(pls)
}
if (!"county_code" %in% colnames(clean_pur_df)) {
stop(paste0("The clean_pur_df argument should be an unaltered data frame ",
"returned from the pull_clean_pur() function."))
}
# pull county shapefile
if (is.null(county)) {
code <- unique(clean_pur_df$county_code)
} else {
code <- find_counties(county)
}
if (length(code) != 1) {
stop(paste0("Since there is data for more than one county in your ",
"clean_pur_df data frame,\nspecify which county you would ",
"like to plot data for with the county argument."))
}
county_shp <- pull_spdf(code, section_township = section_township)
county_bbox <- as.data.frame(county_shp@bbox)
county_df <- spdf_to_df(county_shp)
if (chemicals == "all") {
pur_df <- clean_pur_df
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
if (!chemicals %in% unique(clean_pur_df$chemical_class)) {
stop(paste0("The input clean_pur_df is summed by chemical_class,\nand the ",
"input chemicals argument does not match any unique values ",
"of chemical_class."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemical_class == chemicals)
} else {
if (!toupper(chemicals) %in% unique(clean_pur_df$chemname)) {
stop(paste0("The input chemicals argument does not match any unique ",
"values\nof active ingredients (the chemname column) in the ",
"input clean_pur_df data frame."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemname == toupper(chemicals))
}
if (!is.null(start_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (!is.null(end_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(section) %>%
dplyr::rename(pls = section) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(county_code == code) %>%
dplyr::group_by(township) %>%
dplyr::rename(pls = township) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
if (color_by == "percentile") {
perc <- as.data.frame(t(quantile(unique(pur_df2$kg),
probs = percentile, na.rm = TRUE)))
vec <- 0
for (i in 1:length(percentile)) {
vec <- c(vec, perc[, i])
}
vec <- c(vec, max(unique(pur_df2$kg), na.rm = TRUE))
perc_numbers <- as.character(percentile * 100)
first <- paste0("<=", perc_numbers[1], "th percentile")
last <- paste0(">=", perc_numbers[length(perc_numbers)], "th")
for (i in 1:(length(perc_numbers) - 1)) {
label <- paste0(">=", perc_numbers[i], "th to <", perc_numbers[i+1], "th")
if (i == 1) {
middle <- label
} else {
middle <- c(middle, label)
}
}
labels <- c(first, middle, last)
pur_df3 <- pur_df2 %>%
dplyr::mutate(category = as.character(cut(pur_df2$kg, vec, labels = labels)),
category = ifelse(is.na(category), "Missing", category))
if ("Missing" %in% unique(pur_df3$category)) {
pur_df3$category <- factor(pur_df3$category, levels = c(labels, "Missing"))
} else {
pur_df3$category <- factor(pur_df3$category, levels = labels)
}
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
if (section_township == "section") {
county_df <- county_df %>% dplyr::rename(pls = MTRS)
} else if (section_township == "township") {
county_df <- county_df %>% dplyr::rename(pls = MTR)
}
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
plot <- ggmap::ggmap(location) +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var)) +
viridis::scale_fill_viridis(na.value = "white",
name = legend_label,
discrete = viridis_discrete,
option = fill_option) +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
if (crop) {
long_range <- grDevices::extendrange(pur_spatial$long)
lat_range <- grDevices::extendrange(pur_spatial$lat)
plot <- plot + ggplot2::coord_map(xlim = long_range, ylim = lat_range)
}
if (color_by == "percentile") {
percents <- sub("%", "", colnames(perc)) %>% as.numeric() / 100
perc <- perc %>% tidyr::gather("percentile", "kg") %>%
dplyr::mutate(percentile = percents)
out <- list(plot = plot, data = pur_df3, percentile_values = perc)
} else {
out <- list(plot = plot, data = pur_df3)
}
return(out)
}
fresno_list2 <- map_county_application(pur_df, pls = "township",
color_by = "amount",
percentile = c(0.2, 0.4, 0.6, 0.8),
chemicals = "sulfur")
fresno_list2$plot
?scale_fill_viridis
fresno_list2 <- map_county_application(pur_df, pls = "township",
color_by = "amount",
percentile = c(0.2, 0.4, 0.6, 0.8),
chemicals = "sulfur",
fill_option = "plasma")
fresno_list2$plot
ops <- readRDS("~/Documents/pesticides_project/data/pur_classes/pur_op.rds")
head(ops)
unique(ops$chemname)
?pull_clean_pur
chemical_class_df <- purrr::map_dfr(c("methidathion", "parathion",
"naled", "malathion", "trichlorfon"),
find_chemical_codes, 2010)
find_chemical_codes
chemical_class_df <- purrr::map2_dfr(2010, c("methidathion", "parathion",
"naled", "malathion", "trichlorfon"),
find_chemical_codes)
chemical_class_df
chemical_class_df <- purrr::map2_dfr(2010, c("methidathion", "parathion",
"naled", "malathion", "trichlorfon"),
find_chemical_codes) %>%
dplyr::mutate(chemical_class = "organophosphates")
chemical_class_df
chemical_class_df <- purrr::map2_dfr(2010, c("methidathion", "parathion",
"naled", "malathion", "trichlorfon"),
find_chemical_codes) %>%
dplyr::mutate(chemical_class = "organophosphates") %>%
dplyr::select(-chemical)
chemical_class_df
fresno_list2$data
op_yuba <- pull_clean_pur(2010, "yuba",
chemicals = chemical_class_df$chemname,
verbose = F, sum_application = T,
sum = "chemical_class", unit = "township",
chemical_class = chemical_class_df) %>%
map_county_application(color_by = "amount")
op_yuba$plot
op_yuba$data
op_yuba <- pull_clean_pur(2010, "yuba",
chemicals = chemical_class_df$chemname,
verbose = F, sum_application = T,
sum = "chemical_class",
chemical_class = chemical_class_df) %>%
map_county_application(color_by = "amount")
op_yuba$plot
op_yuba
as.data.frame(op_yuba$data)
pur_df <- pull_clean_pur(2000:2001, "fresno", verbose = F)
fresno_list <- map_county_application(pur_df,
percentile = c(0.2, 0.4, 0.6, 0.8))
fresno_list$plot
head(fresno_list$data)
fresno_list$perc_values
fresno_list$percentile_values
nrow(op_yuba$data)
devtools::document()
?map_county_application
