out[[1]] <- plot
for (i in utils::tail(1:length(counties), -1)) {
out[[i]] <- ca + ggplot2::geom_polygon(data = county_dfs[[i]],
ggplot2::aes(x = long, y = lat, group = group),
color = "transparent", fill = fill_color, alpha =
alpha)
}
names(out) <- counties
} else {
out <- plot
}
} else {
if (length(county_dfs) > 1) {
for (i in utils::tail(1:length(counties), -1)) {
plot <- plot + ggplot2::geom_polygon(data = county_dfs[[i]],
ggplot2::aes(x = long, y = lat, group = group),
color = "transparent", fill = fill_color, alpha =
alpha)
out <- plot
}
} else {
out <- plot
}
}
return(out)
}
fresno_spdf <- purexposure::fresno_spdf
plot_county_locations("fresno", spdf = fresno_spdf)}
plot_county_locations("fresno", spdf = fresno_spdf)
devtools::document()
?plot_county_locations
plot_list <- plot_county_locations(c("san bernardino", "ventura"),
separate_plots = TRUE)
devtools::document()
devtools::document()
toy <- data.frame(x = 1:10, y = as.character(c(11:20)))
toy
str(toy)
toy %>% dplyr::filter(x %in% c(1:5), y %in% c("11", "12"))
toy %>% dplyr::filter(x %in% c(1:5) & y %in% c("11", "12"))
toy %>% dplyr::filter(x %in% c(1:5) | y %in% c("11", "12"))
dir.create("inst")
dir.create("inst/extdata")
# fresno pur raw
fresno_raw <- pull_raw_pur(2000, "fresno")
fresno_raw <- fresno_raw %>%
dplyr::mutate(applic_dt = lubridate::ymd(applic_dt)) %>%
dplyr::filter(applic_dt >= lubridate::ymd("2000-01-01") &
applic_dt <= lubridate::ymd("2000-01-31")) %>%
dplyr::mutate(applic_dt = as.character(applic_dt))
saveRDS(fresno_raw, file = "inst/extdata/fresno_raw.rds")
# fesno pur clean
fresno_clean <- pull_clean_pur(2000, "fresno")
fresno_clean <- fresno_clean %>%
dplyr::filter(date >= lubridate::ymd("2000-01-01") &
date <= lubridate::ymd("2000-01-31"))
saveRDS(fresno_clean, file = "inst/extdata/fresno_clean.rds")
exposure_ex <- purexposure::fresno_clean %>%
calculate_exposure(location = "-119.726751, 36.660967", radius = 3000)
exposure_ex$county_plot <- NULL
saveRDS(exposure_ex, file = "inst/extdata/exposure_ex")
# fresno exposure #2
exposure_ex2 <- fresno_clean %>%
calculate_exposure(location = "-119.247100, 37.204875", radius = 3000)
saveRDS(exposure_ex, file = "inst/extdata/exposure_ex.rds")
exposure_ex2$county_plot <- NULL
saveRDS(exposure_ex2, file = "inst/extdata/exposure_ex2.rds")
# fresno spdf
fresno_spdf <- pull_spdf("fresno")
saveRDS(fresno_spdf, file = "inst/extdata/fresno_spdf.rds")
# products table for 2000
products_2000 <- pull_product_table(2000)
saveRDS(products_2000, file = "inst/extdata/products_2000.rds")
devtools::document()
devtools::document()
system.file("extdata", "fresno_clean.rds",
package = "purexposure")
# fresno exposure #1
fresno_clean <- readRDS(system.file("extdata", "fresno_clean.rds",
package = "purexposure"))
fresno_clean
devtools::document()
fresno_spdf <- readRDS(system.file("extdata", "fresno_spdf.rds",
package = "purexposure))
fresno_spdf <- readRDS(system.file("extdata", "fresno_spdf.rds",
package = "purexposure))
devtools::document()
spdf <- readRDS(system.file("extdata", "fresno_spdf.rds", package = "purexposure"))
exp1 <- readRDS(system.file("extdata", "exposure_ex.rds", package = "purexposure"))
exp2 <- readRDS(system.file("extdata", "exposure_ex2.rds", package = "purexposure"))
exposure_df <- rbind(exp1, exp2)
exposure_df
readRDS(system.file("extdata", "exposure_ex2.rds", package = "purexposure"))
spdf <- readRDS(system.file("extdata", "fresno_spdf.rds", package = "purexposure"))
exp1 <- readRDS(system.file("extdata", "exposure_ex.rds", package = "purexposure"))$exposure
exp2 <- readRDS(system.file("extdata", "exposure_ex2.rds", package = "purexposure"))$exposure
exposure_df <- rbind(exp1, exp2)
plot_locations_exposure(exposure_df, spdf = spdf)}
plot_locations_exposure(exposure_df, spdf = spdf)
devtools::document()
devtools::document()
codes <- purexposure::county_codes
codes
library(countyweather)
?daily_fips
library(devtools)
check()
shp <- purexposure::california_shp
plot(shp)
shp %>% purexposure::spdf_to_df() %>% purexposure::df_plot()
library(magrittr)
shp %>% purexposure::spdf_to_df() %>% purexposure::df_plot()
devtools::document()
build()
devtools::buidl()
devtools::build()
install.packages("devtools")
install.packages("devtools")
sessionInfo()
library(devtools)
library(devtools)
sessionInfo()
any(grepl("^\\.Renviron", list.files("~", all.files = TRUE)))
system("open ~/.Renviron")
c(4240.00,6207.00)*12
library(devtools)
build()
address <- "13883 Lassen Ave, Helm, CA 93627"
long_lat <- c("-120.09789, 36.53379")
find_location_county(c(address, long_lat))
library(purexposure)
find_location_county(c(address, long_lat))
devtools::build()
start <- Sys.time()
clean_pur <- readRDS(system.file("extdata", "fresno_clean.rds",
package = "purexposure"))
fresno_spdf <- readRDS(system.file("extdata", "fresno_spdf.rds",
package = "purexposure"))
exposure_list <- calculate_exposure(clean_pur, location = "-120.098794, 36.532866",
radius = 3000, spdf = fresno_spdf)
end <- Sys.time()
end-start
system.file("extdata", "fresno_clean.rds",
package = "purexposure")
clean_pur <- readRDS("inst/extdata/fresno_clean.rds")
fresno_spdf <- readRDS("inst/extdata/fresno_spdf.rds")
exposure_list <- calculate_exposure(clean_pur, location = "-120.098794, 36.532866",
radius = 3000, spdf = fresno_spdf)
start <- Sys.time()
clean_pur <- readRDS("inst/extdata/fresno_clean.rds")
fresno_spdf <- readRDS("inst/extdata/fresno_spdf.rds")
exposure_list <- calculate_exposure(clean_pur, location = "-120.098794, 36.532866",
radius = 3000, spdf = fresno_spdf)
end <- Sys.time()
end-start
purexposure_package_env$pur_lst
start <- Sys.time()
spdf <- readRDS(system.file("extdata", "fresno_spdf.rds", package = "purexposure"))
pur <- readRDS(system.file("extdata", "fresno_clean.rds", package = "purexposure"))
df <- data.frame(location = "-119.726751, 36.660967",
start_date = "2000-01-01",
end_date = "2000-12-31")
temp <- tempdir()
write_exposure(pur, df, 3000, temp, spdf = spdf)
end <- Sys.time()
end-start
start <- Sys.time()
spdf <- readRDS("inst/extdata/fresno_spdf.rds")
pur <- readRDS("inst/extdata/fresno_clean.rds")
df <- data.frame(location = "-119.726751, 36.660967",
start_date = "2000-01-01",
end_date = "2000-12-31")
temp <- tempdir()
write_exposure(pur, df, 3000, temp, spdf = spdf)
end <- Sys.time()
end-start
start <- Sys.time()
fresno_spdf <- readRDS("inst/extdata/fresno_spdf.rds")
plot_county_locations("fresno", spdf = fresno_spdf)
end <- Sys.time()
end-start
# df_plot
fresno <- readRDS("inst/extdata/fresno_spdf.rds")
fresno %>% spdf_to_df %>% df_plot()}
fresno %>% spdf_to_df %>% df_plot()
library(dplyr
)
fresno %>% spdf_to_df %>% df_plot()
devtools::build()
devtools::document()
devtools::build()
fresno_list <- readRDS(system.file("extdata", "exposure_ex.rds",
package = "purexposure")) %>% plot_exposure()
fresno_list
devtools::document9)
devtools::document()
build()
fresno_spdf <- pull_spdf("fresno")
saveRDS(fresno_spdf, file = "inst/extdata/fresno_spdf.rds")
devtools::build()
devtools::build()
devtools::document()
devtools::build()
df <- readRDS("~/Downloads/exposure_dataset.rds")
head(df)
length(unique(df$id))
unique(df$pollutant)
df <- readRDS("~/Downloads/locations_dates_id.rds")
head(df)
df <- df %>% select(-ID)
library(dplyr)
df <- df %>% select(-ID)
df
locations_dates_df <- df
locations <- as.character(unique(locations_dates_df$location))
locations
for (i in 1:length(locations)) {
if (length(grep("-", locations[i])) == 1) {
latlon <- locations[i]
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- locations[i]
latlon_df <- help_geocode(address)
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(address_x, address_y))
}
latlon_ch <- paste0(latlon_out[1], ", ", latlon_out[2])
if (i == 1) {
latlon <- latlon_ch
} else {
latlon <- c(latlon, latlon_ch)
}
}
loc_df <- data.frame(location = unique(locations_dates_df$location),
latlon_loc = latlon)
latlon
length(locations)
length(grep("-", locations[i])) == 1
i
i <- 1
locations
i
latlon <- locations[i]
latlon
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
latlon_vec
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
latlon_out
latlon_ch <- paste0(latlon_out[1], ", ", latlon_out[2])
latlon_ch
for (i in 1:length(locations)) {
if (length(grep("-", locations[i])) == 1) {
latlon <- locations[i]
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- locations[i]
latlon_df <- help_geocode(address)
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(address_x, address_y))
}
latlon_ch <- paste0(latlon_out[1], ", ", latlon_out[2])
if (i == 1) {
latlon <- latlon_ch
} else {
latlon <- c(latlon, latlon_ch)
}
}
latlon
locations
list.files("~/Desktop")
df <- readRDS("~/Desktop/summary_non_missing_data.rds")
head(df)
class(df)
locations_dates_df
locations <- as.character(locations_dates_df$location)
for (i in 1:length(locations)) {
if (length(grep("-", locations[i])) == 1) {
latlon <- locations[i]
latlon_vec <- as.numeric(as.vector(sapply(unlist(strsplit(latlon, ",")),
stringr::str_trim)))
address_x <- latlon_vec[1]
address_y <- latlon_vec[2]
latlon_out <- latlon_vec
} else {
address <- locations[i]
latlon_df <- help_geocode(address)
address_x <- latlon_df$lon
address_y <- latlon_df$lat
latlon_out <- as.numeric(c(address_x, address_y))
}
latlon_ch <- paste0(latlon_out[1], ", ", latlon_out[2])
if (i == 1) {
latlon <- latlon_ch
} else {
latlon <- c(latlon, latlon_ch)
}
}
loc_df <- data.frame(location = unique(locations_dates_df$location),
latlon_loc = latlon)
latlon
class(df)
names(df)
df$continuous_summary
class(df$continuous_summary)
df$continuous_summary[1,]
df$continuous_summary[1,1]
#'                           sum = "chemical_class",
#'                           chemical_class = chemical_class_df) %>%
#'    plot_county_application()
#' op_yuba$map
#' }
#'
#' @importFrom magrittr %>%
#' @importFrom rlang !!
#' @importFrom rlang :=
#' @export
plot_county_application <- function(clean_pur_df, county = NULL, pls = NULL,
color_by = "amount",
percentile = c(0.25, 0.5, 0.75),
start_date = NULL, end_date = NULL,
chemicals = "all", fill = "viridis",
crop = FALSE, alpha = 1,
ggmap_background = TRUE, ...) {
if (is.null(pls)) {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- "section"
} else {
section_township <- "township"
}
} else {
if ("section" %in% colnames(clean_pur_df)) {
section_township <- tolower(pls)
} else {
section_township <- "township"
}
}
if (!"pur_code" %in% colnames(clean_pur_df)) {
stop(paste0("The clean_pur_df argument should be an unaltered data frame ",
"returned from the pull_clean_pur() function."))
}
# pull county shapefile
if (is.null(county)) {
code <- unique(clean_pur_df$pur_code)
if (length(code) > 1) {
counties <- paste(find_counties(code, "names"), collapse = ", ")
stop(paste0("Your clan_pur_df data frame has data for more than one ",
"county (", counties, "). You can specify which county to ",
"plot data for with the county argument."))
}
} else {
code <- find_counties(county)
}
if (length(code) != 1) {
stop(paste0("Since there is data for more than one county in your ",
"clean_pur_df data frame,\nspecify which county you would ",
"like to plot data for with the county argument."))
}
args <- list(...)
if (is.null(args$spdf)) {
county_shp <- pull_spdf(code, section_township = section_township)
} else {
county_shp <- args$spdf
}
county_bbox <- as.data.frame(county_shp@bbox)
county_df <- spdf_to_df(county_shp)
if (chemicals == "all") {
pur_df <- clean_pur_df
} else if ("chemical_class" %in% colnames(clean_pur_df)) {
if (!chemicals %in% unique(clean_pur_df$chemical_class)) {
stop(paste0("The input clean_pur_df is summed by chemical_class,\nand the ",
"input chemicals argument does not match any unique values ",
"of chemical_class."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemical_class == chemicals)
} else {
if (!toupper(chemicals) %in% unique(clean_pur_df$chemname)) {
stop(paste0("The input chemicals argument does not match any unique ",
"values\nof active ingredients (the chemname column) in the ",
"input clean_pur_df data frame."))
}
pur_df <- clean_pur_df %>% dplyr::filter(chemname == toupper(chemicals))
}
if (!is.null(start_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (!is.null(end_date)) {
pur_df <- pur_df %>% dplyr::filter(date >= lubridate::ymd(start_date))
}
if (section_township == "section") {
pur_df2 <- pur_df %>%
dplyr::filter(pur_code == code) %>%
dplyr::group_by(section) %>%
dplyr::rename(pls = section) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
} else {
pur_df2 <- pur_df %>%
dplyr::filter(pur_code == code) %>%
dplyr::group_by(township) %>%
dplyr::rename(pls = township) %>%
dplyr::summarise(kg = sum(kg_chm_used, na.rm = TRUE)) %>%
dplyr::mutate(kg = ifelse(is.na(kg), 0, kg))
}
if (color_by == "percentile") {
cutpoints_list <- help_categorize(section_data = pur_df2, buffer_or_county = "buffer",
percentile = percentile) # find cutpoints based on
# given data frame
pur_df3 <- cutpoints_list$df
labels <- cutpoints_list$categories
cutoff_values <- cutpoints_list$cutoff_values
viridis_discrete <- TRUE
fill_var <- "category"
} else {
pur_df3 <- pur_df2
viridis_discrete <- FALSE
fill_var <- "kg"
}
if (section_township == "section") {
county_df <- county_df %>% dplyr::rename(pls = MTRS)
} else if (section_township == "township") {
county_df <- county_df %>% dplyr::rename(pls = MTR)
}
colnames(pur_df3)[1] <- "pls"
pur_spatial <- pur_df3 %>% dplyr::left_join(county_df, by = "pls")
long_range <- grDevices::extendrange(county_df$long)
lat_range <- grDevices::extendrange(county_df$lat)
if (ggmap_background) {
suppressMessages(suppressWarnings(
location <- ggmap::get_map(c(floor(county_bbox$min[1]), floor(county_bbox$min[2]),
ceiling(county_bbox$max[1]), ceiling(county_bbox$max[2])),
color = "bw")))
}
legend_label <- paste0("Applied Pesticides\n(kg/", section_township, ")")
colormaps_vec <- unlist(colormap::colormaps)
names(colormaps_vec) <- NULL
if (!fill %in% colormaps_vec) {
stop(paste0("The fill argument should be a color palette from the ",
"colormap package."))
}
gradient <- colormap::colormap(fill, nshades = 1000, alpha = alpha)
# gradient <- c("#FFFFFF", gradient)
if (ggmap_background) {
plot <- ggmap::ggmap(location)
} else {
plot <- ggplot()
}
plot <- plot  +
ggplot2::geom_polygon(data = county_df, ggplot2::aes(x = long, y = lat, group = group),
color = "black", fill = NA) +
ggplot2::geom_polygon(data = pur_spatial, ggplot2::aes_string(x = "long", y = "lat", ## aes_string
group = "group",
fill = fill_var))
if (color_by == "amount") {
plot <- plot +
scale_fill_gradientn2(colours = gradient, alpha = alpha, name = legend_label,
na.value = "#FFFFFF")
} else if (color_by == "percentile") {
categories <- as.character(levels(pur_spatial$category))
if (!"None recorded" %in% categories) {
categories <- c(categories, "missing")
}
n_cols <- as.integer(length(gradient)/(length(categories)-1))
end_i <- length(categories) - 1
for (i in 1:end_i) {
col_vec <- gradient[n_cols*i]
if (i == 1) {
cols_out <- col_vec
} else {
cols_out <- c(cols_out, col_vec)
}
}
cols_out <- c(cols_out, "#FFFFFF")
names(cols_out) <- categories
plot <- plot  +
ggplot2::scale_fill_manual(values = cols_out, name = legend_label)
}
plot <- plot +
ggplot2::theme_void() +
ggplot2::coord_map(xlim = long_range, ylim = lat_range)
if (crop) {
long_range <- grDevices::extendrange(pur_spatial$long)
lat_range <- grDevices::extendrange(pur_spatial$lat)
plot <- plot + ggplot2::coord_map(xlim = long_range, ylim = lat_range)
}
if (color_by == "percentile") {
out <- list(map = plot, data = pur_df3, cutoff_values = cutoff_values)
} else {
out <- list(map = plot, data = pur_df3)
}
return(out)
}
plot_county_application(fresno)
fresno <- pull_clean_pur(2000:2004, "Fresno")
library(purexposure)
fresno <- pull_clean_pur(2000:2004, "Fresno")
plot <- ggplot2::ggplot()
devtools::document()
?geom_polygon
list.files()
