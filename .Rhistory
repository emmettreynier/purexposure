# df_filtered <- df %>% dplyr::filter(rlang::UQ(pls_var) %in% pls_int)
if (pls_quote == "MTRS") {
df_filtered <- df %>% dplyr::filter(MTRS %in% pls_int)
} else {
df_filtered <- df %>% dplyr::filter(MTR %in% pls_int)
}
# combine buffer to existing sections shp file
buffer_shp <- shp[1, ]
buffer_shp@polygons[[1]]@Polygons[[1]]@coords <- buffer
buffer_shp <- sp::spChFIDs(buffer_shp, paste("buffer", 1:nrow(buffer_shp), sep = ""))
if (pls_quote == "MTRS") {
buffer_shp@data$MTRS <- "buffer"
} else {
buffer_shp@data$MTR <- "buffer"
}
comb_shp <- maptools::spRbind(shp, buffer_shp)
suppressMessages(comb_df <- broom::tidy(comb_shp))
if (pls_quote == "MTRS") {
comb_shp_filt <- subset(comb_shp, MTRS %in% c(pls_int, "buffer"))
} else {
comb_shp_filt <- subset(comb_shp, MTR %in% c(pls_int, "buffer"))
}
buffer_poly <- length(comb_shp_filt@polygons)
section_polys <- 1:(length(comb_shp_filt@polygons) - 1)
for (i in 1:length(section_polys)) {
section_area <- comb_shp_filt@polygons[[i]]@Polygons[[1]]@area
intersection <- rgeos::gIntersection(sp::SpatialPolygons(comb_shp_filt@polygons[i]),
sp::SpatialPolygons(comb_shp_filt@polygons[buffer_poly]))
if (is.null(intersection)) {
intersected_area <- 0
} else {
intersected_area <- rgeos::gArea(intersection)
}
if (pls_quote == "MTRS") {
percent_df <- data.frame(MTRS = comb_shp_filt@data$MTRS[i],
percent = intersected_area/section_area)
} else {
percent_df <- data.frame(MTR = comb_shp_filt@data$MTR[i],
percent = intersected_area/section_area)
}
if (i == 1) {
out <- percent_df
} else {
out <- rbind(out, percent_df)
}
}
out <- dplyr::filter(out, percent != 0)
if (pls_quote == "MTRS") {
comb_shp_filt <- subset(comb_shp_filt, MTRS %in% c(as.character(out$MTRS),
"buffer"))
} else {
comb_shp_filt <- subset(comb_shp_filt, MTR %in% c(as.character(out$MTR),
"buffer"))
}
suppressMessages(comb_df_filt <- broom::tidy(comb_shp_filt))
comb_df_filt <- dplyr::mutate(comb_df_filt, group = as.character(group))
comb_df_filt <- df_filtered %>%
dplyr::mutate(group = as.character(group)) %>%
dplyr::right_join(comb_df_filt, by = c("long", "lat", "hole", "order",
"piece", "id", "group"))
pur_filt <- dplyr::filter(clean_pur_df, !is.na(kg_chm_used))
out <- list(pur_filt = pur_filt,
comb_df_filt = comb_df_filt)
return(out)
}
pur_filt_df(MTRS, "MTRS")
pur_filt <- pur_filt_df(MTRS, "MTRS")
pls_int
df
class(df)
if (pls_quote == "MTRS") {
df_filtered <- df %>% dplyr::filter(MTRS %in% pls_int)
} else {
df_filtered <- df %>% dplyr::filter(MTR %in% pls_int)
}
df_filtered <- df %>% dplyr::filter(rlang::UQ(pls_var) %in% pls_int)
pur_filt_df <- function(pls, pls_quote) {
# pls_var <- rlang::enquo(pls)
pls_var <- rlang::enquo(MTRS)
pls_name <- rlang::quo_name(pls_quote)
tibble_to_vector <- function(tib) {
vec <- tib %>% dplyr::pull(1) %>% as.character()
return(vec)
}
pls_int <- which_pls %>%
tibble::as_tibble() %>%
dplyr::select(!!pls_name) %>%
unique() %>%
tibble_to_vector()
# filter shp file to include only sections intersecting w/ buffer
df_filtered <- df %>% dplyr::filter(rlang::UQ(pls_var) %in% pls_int)
# if (pls_quote == "MTRS") {
#   df_filtered <- df %>% dplyr::filter(MTRS %in% pls_int)
# } else {
#   df_filtered <- df %>% dplyr::filter(MTR %in% pls_int)
# }
# combine buffer to existing sections shp file
buffer_shp <- shp[1, ]
buffer_shp@polygons[[1]]@Polygons[[1]]@coords <- buffer
buffer_shp <- sp::spChFIDs(buffer_shp, paste("buffer", 1:nrow(buffer_shp), sep = ""))
if (pls_quote == "MTRS") {
buffer_shp@data$MTRS <- "buffer"
} else {
buffer_shp@data$MTR <- "buffer"
}
comb_shp <- maptools::spRbind(shp, buffer_shp)
suppressMessages(comb_df <- broom::tidy(comb_shp))
if (pls_quote == "MTRS") {
comb_shp_filt <- subset(comb_shp, MTRS %in% c(pls_int, "buffer"))
} else {
comb_shp_filt <- subset(comb_shp, MTR %in% c(pls_int, "buffer"))
}
buffer_poly <- length(comb_shp_filt@polygons)
section_polys <- 1:(length(comb_shp_filt@polygons) - 1)
for (i in 1:length(section_polys)) {
section_area <- comb_shp_filt@polygons[[i]]@Polygons[[1]]@area
intersection <- rgeos::gIntersection(sp::SpatialPolygons(comb_shp_filt@polygons[i]),
sp::SpatialPolygons(comb_shp_filt@polygons[buffer_poly]))
if (is.null(intersection)) {
intersected_area <- 0
} else {
intersected_area <- rgeos::gArea(intersection)
}
if (pls_quote == "MTRS") {
percent_df <- data.frame(MTRS = comb_shp_filt@data$MTRS[i],
percent = intersected_area/section_area)
} else {
percent_df <- data.frame(MTR = comb_shp_filt@data$MTR[i],
percent = intersected_area/section_area)
}
if (i == 1) {
out <- percent_df
} else {
out <- rbind(out, percent_df)
}
}
out <- dplyr::filter(out, percent != 0)
if (pls_quote == "MTRS") {
comb_shp_filt <- subset(comb_shp_filt, MTRS %in% c(as.character(out$MTRS),
"buffer"))
} else {
comb_shp_filt <- subset(comb_shp_filt, MTR %in% c(as.character(out$MTR),
"buffer"))
}
suppressMessages(comb_df_filt <- broom::tidy(comb_shp_filt))
comb_df_filt <- dplyr::mutate(comb_df_filt, group = as.character(group))
comb_df_filt <- df_filtered %>%
dplyr::mutate(group = as.character(group)) %>%
dplyr::right_join(comb_df_filt, by = c("long", "lat", "hole", "order",
"piece", "id", "group"))
pur_filt <- dplyr::filter(clean_pur_df, !is.na(kg_chm_used))
out <- list(pur_filt = pur_filt,
comb_df_filt = comb_df_filt)
return(out)
}
pur_filt_df <- function(pls, pls_quote) {
pls_var <- rlang::enquo(pls)
# pls_var <- rlang::enquo(MTRS)
pls_name <- rlang::quo_name(pls_quote)
tibble_to_vector <- function(tib) {
vec <- tib %>% dplyr::pull(1) %>% as.character()
return(vec)
}
pls_int <- which_pls %>%
tibble::as_tibble() %>%
dplyr::select(!!pls_name) %>%
unique() %>%
tibble_to_vector()
# filter shp file to include only sections intersecting w/ buffer
df_filtered <- df %>% dplyr::filter(rlang::UQ(pls_var) %in% pls_int)
# if (pls_quote == "MTRS") {
#   df_filtered <- df %>% dplyr::filter(MTRS %in% pls_int)
# } else {
#   df_filtered <- df %>% dplyr::filter(MTR %in% pls_int)
# }
# combine buffer to existing sections shp file
buffer_shp <- shp[1, ]
buffer_shp@polygons[[1]]@Polygons[[1]]@coords <- buffer
buffer_shp <- sp::spChFIDs(buffer_shp, paste("buffer", 1:nrow(buffer_shp), sep = ""))
if (pls_quote == "MTRS") {
buffer_shp@data$MTRS <- "buffer"
} else {
buffer_shp@data$MTR <- "buffer"
}
comb_shp <- maptools::spRbind(shp, buffer_shp)
suppressMessages(comb_df <- broom::tidy(comb_shp))
if (pls_quote == "MTRS") {
comb_shp_filt <- subset(comb_shp, MTRS %in% c(pls_int, "buffer"))
} else {
comb_shp_filt <- subset(comb_shp, MTR %in% c(pls_int, "buffer"))
}
buffer_poly <- length(comb_shp_filt@polygons)
section_polys <- 1:(length(comb_shp_filt@polygons) - 1)
for (i in 1:length(section_polys)) {
section_area <- comb_shp_filt@polygons[[i]]@Polygons[[1]]@area
intersection <- rgeos::gIntersection(sp::SpatialPolygons(comb_shp_filt@polygons[i]),
sp::SpatialPolygons(comb_shp_filt@polygons[buffer_poly]))
if (is.null(intersection)) {
intersected_area <- 0
} else {
intersected_area <- rgeos::gArea(intersection)
}
if (pls_quote == "MTRS") {
percent_df <- data.frame(MTRS = comb_shp_filt@data$MTRS[i],
percent = intersected_area/section_area)
} else {
percent_df <- data.frame(MTR = comb_shp_filt@data$MTR[i],
percent = intersected_area/section_area)
}
if (i == 1) {
out <- percent_df
} else {
out <- rbind(out, percent_df)
}
}
out <- dplyr::filter(out, percent != 0)
if (pls_quote == "MTRS") {
comb_shp_filt <- subset(comb_shp_filt, MTRS %in% c(as.character(out$MTRS),
"buffer"))
} else {
comb_shp_filt <- subset(comb_shp_filt, MTR %in% c(as.character(out$MTR),
"buffer"))
}
suppressMessages(comb_df_filt <- broom::tidy(comb_shp_filt))
comb_df_filt <- dplyr::mutate(comb_df_filt, group = as.character(group))
comb_df_filt <- df_filtered %>%
dplyr::mutate(group = as.character(group)) %>%
dplyr::right_join(comb_df_filt, by = c("long", "lat", "hole", "order",
"piece", "id", "group"))
pur_filt <- dplyr::filter(clean_pur_df, !is.na(kg_chm_used))
out <- list(pur_filt = pur_filt,
comb_df_filt = comb_df_filt)
return(out)
}
pur_filt <- pur_filt_df(MTRS, "MTRS")
pur_filt$pur_filt
pur_filt$comb_df_filt
time-Df
time_df
start_date <- time_df$start_date
end_date <- time_df$end_date
pur_out_df <- function(...) {
group_by <- rlang::quos(...)
pur_out <- pur_filt %>%
dplyr::filter(date >= start_date & date <= end_date) %>%
dplyr::group_by(!!!group_by) %>%
summarise(kg = sum(kg_chm_used)) %>%
dplyr::ungroup()
return(pur_out)
}
if (chemicals == "all") {
if ("section" %in% colnames(clean_pur_df)) {
if (include_aerial_ground) {
pur_out <- pur_out_df(section, aerial_ground)
} else {
pur_out <- pur_out_df(section)
}
} else {
if (include_aerial_ground) {
pur_out <- pur_out_df(township, aerial_ground)
} else {
pur_out <- pur_out_df(township)
}
}
} else {
if ("section" %in% colnames(clean_pur_df)) {
if (include_aerial_ground) {
pur_out <- pur_out_df(section, chemical_class, aerial_ground)
} else {
pur_out <- pur_out_df(section, chemical_class)
}
} else {
if (include_aerial_ground) {
pur_out <- pur_out_df(township, chemical_class, aerial_ground)
} else {
pur_out <- pur_out_df(township, chemical_class)
}
}
}
include_aerial_ground <- FALSE
if (chemicals == "all") {
if ("section" %in% colnames(clean_pur_df)) {
if (include_aerial_ground) {
pur_out <- pur_out_df(section, aerial_ground)
} else {
pur_out <- pur_out_df(section)
}
} else {
if (include_aerial_ground) {
pur_out <- pur_out_df(township, aerial_ground)
} else {
pur_out <- pur_out_df(township)
}
}
} else {
if ("section" %in% colnames(clean_pur_df)) {
if (include_aerial_ground) {
pur_out <- pur_out_df(section, chemical_class, aerial_ground)
} else {
pur_out <- pur_out_df(section, chemical_class)
}
} else {
if (include_aerial_ground) {
pur_out <- pur_out_df(township, chemical_class, aerial_ground)
} else {
pur_out <- pur_out_df(township, chemical_class)
}
}
}
pur_filt
pur_filt_df <- function(pls, pls_quote) {
pls_var <- rlang::enquo(pls)
pls_name <- rlang::quo_name(pls_quote)
tibble_to_vector <- function(tib) {
vec <- tib %>% dplyr::pull(1) %>% as.character()
return(vec)
}
pls_int <- which_pls %>%
tibble::as_tibble() %>%
dplyr::select(!!pls_name) %>%
unique() %>%
tibble_to_vector()
# filter shp file to include only sections intersecting w/ buffer
df_filtered <- df %>% dplyr::filter(rlang::UQ(pls_var) %in% pls_int)
# combine buffer to existing sections shp file
buffer_shp <- shp[1, ]
buffer_shp@polygons[[1]]@Polygons[[1]]@coords <- buffer
buffer_shp <- sp::spChFIDs(buffer_shp, paste("buffer", 1:nrow(buffer_shp), sep = ""))
if (pls_quote == "MTRS") {
buffer_shp@data$MTRS <- "buffer"
} else {
buffer_shp@data$MTR <- "buffer"
}
comb_shp <- maptools::spRbind(shp, buffer_shp)
suppressMessages(comb_df <- broom::tidy(comb_shp))
if (pls_quote == "MTRS") {
comb_shp_filt <- subset(comb_shp, MTRS %in% c(pls_int, "buffer"))
} else {
comb_shp_filt <- subset(comb_shp, MTR %in% c(pls_int, "buffer"))
}
buffer_poly <- length(comb_shp_filt@polygons)
section_polys <- 1:(length(comb_shp_filt@polygons) - 1)
for (i in 1:length(section_polys)) {
section_area <- comb_shp_filt@polygons[[i]]@Polygons[[1]]@area
intersection <- rgeos::gIntersection(sp::SpatialPolygons(comb_shp_filt@polygons[i]),
sp::SpatialPolygons(comb_shp_filt@polygons[buffer_poly]))
if (is.null(intersection)) {
intersected_area <- 0
} else {
intersected_area <- rgeos::gArea(intersection)
}
if (pls_quote == "MTRS") {
percent_df <- data.frame(MTRS = comb_shp_filt@data$MTRS[i],
percent = intersected_area/section_area)
} else {
percent_df <- data.frame(MTR = comb_shp_filt@data$MTR[i],
percent = intersected_area/section_area)
}
if (i == 1) {
out <- percent_df
} else {
out <- rbind(out, percent_df)
}
}
out <- dplyr::filter(out, percent != 0)
if (pls_quote == "MTRS") {
comb_shp_filt <- subset(comb_shp_filt, MTRS %in% c(as.character(out$MTRS),
"buffer"))
} else {
comb_shp_filt <- subset(comb_shp_filt, MTR %in% c(as.character(out$MTR),
"buffer"))
}
suppressMessages(comb_df_filt <- broom::tidy(comb_shp_filt))
comb_df_filt <- dplyr::mutate(comb_df_filt, group = as.character(group))
comb_df_filt <- df_filtered %>%
dplyr::mutate(group = as.character(group)) %>%
dplyr::right_join(comb_df_filt, by = c("long", "lat", "hole", "order",
"piece", "id", "group"))
pur_filt <- dplyr::filter(clean_pur_df, !is.na(kg_chm_used))
out <- list(pur_filt = pur_filt,
comb_df_filt = comb_df_filt)
return(out)
}
if ("section" %in% colnames(clean_pur_df)) {
out_list <- pur_filt_df(MTRS, "MTRS")
} else {
out_list <- pur_filt_df(MTR, "MTR")
}
pur_filt <- out_list$pur_filt
comb_df_filt <- out_list$comb_df_filt
}
pur_filt
if (chemicals == "all") {
if ("section" %in% colnames(clean_pur_df)) {
if (include_aerial_ground) {
pur_out <- pur_out_df(section, aerial_ground)
} else {
pur_out <- pur_out_df(section)
}
} else {
if (include_aerial_ground) {
pur_out <- pur_out_df(township, aerial_ground)
} else {
pur_out <- pur_out_df(township)
}
}
} else {
if ("section" %in% colnames(clean_pur_df)) {
if (include_aerial_ground) {
pur_out <- pur_out_df(section, chemical_class, aerial_ground)
} else {
pur_out <- pur_out_df(section, chemical_class)
}
} else {
if (include_aerial_ground) {
pur_out <- pur_out_df(township, chemical_class, aerial_ground)
} else {
pur_out <- pur_out_df(township, chemical_class)
}
}
}
buffer_area <- pi * (radius^2)
exp_df <- function(mutate_expr, new_name_quote, left_join_quote,
mutate_expr2) {
mutate_expr <- rlang::enquo(mutate_expr)
mutate_name <- rlang::quo_name(new_name_quote)
new_name_quote <- rlang::quo_name(left_join_quote)
mutate_expr2 <- rlang::enquo(mutate_expr2) #either NA or aerial_ground
exp <- out %>%
dplyr::mutate(!!mutate_name := as.character(!!mutate_expr)) %>%
dplyr::rename(!!new_name_quote := !!mutate_expr) %>%
dplyr::left_join(pur_out, by = new_name_quote) %>%
dplyr::mutate(kg_int = percent * kg,
location = location,
radius = radius,
start_date = start_date,
end_date = end_date,
chemicals = chemicals,
area = buffer_area,
aerial_ground = !!mutate_expr2,
aerial_ground = as.character(aerial_ground),
none_recorded = FALSE)
a_g <- exp %>% dplyr::select(aerial_ground)
all_others <- exp %>% dplyr::select(-aerial_ground)
exp <- all_others %>%
dplyr::mutate(aerial_ground = a_g$aerial_ground) %>%
dplyr::select(5, 1:4, 7:8, 6, 9:10, 12, 11)
return(exp)
}
if ("section" %in% colnames(clean_pur_df)) {
if (include_aerial_ground) {
exp <- exp_df(MTRS, "MTRS", "section", aerial_ground)
} else {
exp <- exp_df(MTRS, "MTRS", "section", NA)
}
} else {
if (include_aerial_ground) {
exp <- exp_df(MTR, "MTR", "township", aerial_ground)
} else {
exp <- exp_df(MTR, "MTR", "township", NA)
}
}
if (chemicals == "chemical_class") {
test_vec <- unique(clean_pur_df$chemical_class) %in% unique(exp$chemicals)
test <- all(test_vec)
if (!test) {
missing_classes <- unique(clean_pur_df$chemical_class)[!test_vec]
df_to_add <- data.frame(location = rep(location, length(missing_classes)),
section = rep(NA, length(missing_classes)),
percent = rep(NA, length(missing_classes)),
kg = rep(0, length(missing_classes)),
kg_int = rep(NA, length(missing_classes)),
start_date = rep(start_date, length(missing_classes)),
end_date = rep(end_date, length(missing_classes)),
radius = rep(radius, length(missing_classes)),
chemicals = missing_classes,
area = rep(buffer_area, length(missing_classes)),
aerial_ground = NA,
none_recorded = rep(none_recorded, length(missing_classes)))
exp <- rbind(exp, df_to_add)
}
}
chemicals == "chemical_class"
test_vec <- unique(clean_pur_df$chemical_class) %in% unique(exp$chemicals)
test <- all(test_vec)
test
all(test_vec)
unique(clean_pur_df$chemical_class) %in% unique(exp$chemicals)
missing_classes <- unique(clean_pur_df$chemical_class)[!test_vec]
missing_classes
if (chemicals == "chemical_class") {
test_vec <- unique(clean_pur_df$chemical_class) %in% unique(exp$chemicals)
test <- all(test_vec)
if (!test) {
missing_classes <- unique(clean_pur_df$chemical_class)[!test_vec]
df_to_add <- data.frame(location = rep(location, length(missing_classes)),
section = rep(NA, length(missing_classes)),
percent = rep(NA, length(missing_classes)),
kg = rep(0, length(missing_classes)),
kg_int = rep(NA, length(missing_classes)),
start_date = rep(start_date, length(missing_classes)),
end_date = rep(end_date, length(missing_classes)),
radius = rep(radius, length(missing_classes)),
chemicals = missing_classes,
area = rep(buffer_area, length(missing_classes)),
aerial_ground = NA,
none_recorded = rep(TRUE, length(missing_classes)))
exp <- rbind(exp, df_to_add)
}
}
exp, df_to_add
exp
