% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/04-map.R
\name{map_county_application}
\alias{map_county_application}
\title{Map pesticide application by county}
\usage{
map_county_application(clean_pur_df, county = NULL, pls = NULL,
  color_by = "percentile", percentile = c(0.25, 0.5, 0.75),
  start_date = NULL, end_date = NULL, chemicals = "all",
  fill_option = "viridis", crop = FALSE)
}
\arguments{
\item{clean_pur_df}{A data frame returned by \code{pull_clean_pur}.}

\item{county}{Optional. If your \code{clean_pur_df} data frame contains data
for multiple counties, this argument specifies which county you would like
to plot application for. Either a PUR county name or county code. California
names and county codes as they appear in PUR datasets can be found in the
county_codes dataset available with this package.}

\item{pls}{Optional. Either "section" or "township". If your
\code{clean_pur_df} data frame has both a \code{section} and
\code{township} column, the \code{pls} argument specifies which pls unit
you would like to plot application for. If you pulled data specifying
\code{unit = "township"}, application will be plotted by township.}

\item{color_by}{Either "amount" or "percentile" (the default). Specifies
whether you would like application amounts to be colored according to
amount, resulting in a gradient legend, or by the percentile that they fall
into for the given dataset and date range. You can specify percentile
cutpoints with the \code{percentile} argument.}

\item{percentile}{A numeric vector in (0, 1) specifying percentile cutpoints.
The default is \code{c(0.25, 0.5, 0.75)}, which results in four categories:
< 25th percentile, >= 25th to < 50th, >= 50th to < 75th, and >= 75th.}

\item{start_date}{Optional. "yyyy-mm-dd" giving a starting date for the date
range that you would like to map application for. The default is to plot
application for the entire date range in your \code{clean_pur_df} data frame.}

\item{end_date}{Optional. "yyyy-mm-dd" giving an ending date for the date
range that you would like to plot application for. The default is to plot
application for the entire date range in your \code{clean_pur_df} data frame.}

\item{chemicals}{Either "all" (the default) to plot summed active ingredents
present in your \code{clean_pur_df} data frame, a chemical class present in
the \code{chemical_class} column of the \code{clean_pur_df} data frame, or
a specific active ingredient present in the \code{chemname} column of the
\code{clean_pur_df} data frame.}

\item{fill_option}{An argument passed on to the \code{option} argument of
\code{scale_fill_viridis}. Either "viridis", "inferno", "magma", or
"plasma". The default is "viridis".}

\item{crop}{TRUE / FALSE for whether you would like your plot zoomed in on
sections or townships with recorded application data.}
}
\value{
A list with three elements:
\describe{
  \item{plot}{A plot of the county with application summed by section or
  township and colored by amount or by percentile.}
  \item{data}{A data frame with the plotted application data.}
  \item{cutoff_values}{A data frame with two columns: \code{percentile}
  and \code{kg}, giving the cut points for each percentile in the
  \code{clean_pur_df} for the specified chemicals. This element of the list
  is not returned if \code{color_by = "amount"}.}
}
}
\description{
\code{map_county_application} returns a plot of applied pesticides (either the
sum of all active ingredients present in the input \code{pull_clean_pur} data
frame, a specified chemical class, or a specified active ingredient). Application
is summed by section or township. PLS units can be shaded by amount or by
percentile.
}
\examples{
\dontrun{
# plot all active ingredients
pur_df <- pull_clean_pur(2000:2001, "fresno", verbose = F)
fresno_list <- map_county_application(pur_df,
                                      percentile = c(0.2, 0.4, 0.6, 0.8))
fresno_list$plot
head(fresno_list$data)
fresno_list$cutoff_values

# plot a specific active ingredient
fresno_list2 <- map_county_application(pur_df, pls = "township",
                                       color_by = "amount",
                                       chemicals = "sulfur",
                                       fill_option = "plasma")
fresno_list2$plot

# plot a chemical class
chemical_class_df <- purrr::map2_dfr(2010, c("methidathion", "parathion",
                                             "naled", "malathion",
                                             "trichlorfon"),
                                     find_chemical_codes) \%>\%
     dplyr::mutate(chemical_class = "organophosphates") \%>\%
     dplyr::select(-chemical)
op_yuba <- pull_clean_pur(2010, "yuba",
                          chemicals = chemical_class_df$chemname,
                          verbose = F, sum_application = T,
                          sum = "chemical_class",
                          chemical_class = chemical_class_df) \%>\%
   map_county_application(color_by = "amount")
op_yuba$plot
}

}
